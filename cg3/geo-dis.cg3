# ============================================ #
# Georgian disambiguator                       #
# This file combines rules for OG, MG and NG.  #
# Rules that are only valid for a subset of    #
# varieties should be prepended by the variety #
# name(s): o, m, n, plus hyphen.               #
# E.g., om-SELECT …			       #
# ============================================ #

# see https://edu.visl.dk/cg3/single/

# tavisupleba/content/article/1538021
# ალექსანდრე ქუთათელი: პირისპირ

# run like:
# cat test.vrt | vislcg3 --grammar geo-ng-dis.cg3 --trace > test.dis

# OBS: do not use [0], [1] etc. as tags since they are used internally in the Lisp interface

STRICT-TAGS += 1 2 3 A Abbrev Abs Act Adv Advb Alpha Anim Anthr Aor
	    Approx Area Att Ben Bracket Card Caus Causal Cause Cj Colon
	    Comm Comma Compar Compl Cond Conj-I Conj-II Conj-III ConjFut
	    ConjPerf ConjPres Converb Coord DAdvb DDAdvb DDDat DDErg DDGen
	    DDInst DDL DDNewPl DDNom DDOldPl DDPl DDSg DDVoc DDat DErg DGen
	    DInst DL DNewPl DNom DO:1 DO:1Pl DO:1Sg DO:2 DO:2Pl DO:2Sg DO:3
	    DO:3Pl DO:3Sg DOldPl DPl DSg DTrunc DVoc Dash Dat Deg DegNum Dem
	    Dialect Digits Dir Disc Dist Distr Dot Elat Ellipsis Encl Encl:Aux
	    Encl:IndSp1 Encl:IndSp2 Encl:IndSp3 Encl:Q Encl:ვე Encl:კი
	    Encl:მდა Encl:მე Encl:მც Encl:მცა Encl:რა Encl:რე Encl:ღა Encl:ც
	    Encl:ცა Encl:ძი Erg ExclPoint Ext Final FirstName Foc Foreign
	    Frac Freq Fut FutPart Gen Hum Hydr Hyphen IO:1 IO:1Pl IO:1Sg
	    IO:2 IO:2Pl IO:2Sg IO:3 IO:3Pl Imp Imperfective Impf Impv Impv-I
	    Impv-II Indef Inst Int IntMark Interj Inv Iter Iter-II Iter-III
	    IterImpf IterPerf IterPres L LV LastName Letter Loc Mann Meas Med
	    MedAct MedPass Modal N NMod Neg NegPart NewPl Nom NonStand Nonhum
	    Num OV Old OldPl Opt Ord Org PP PP:გან PP:და PP:დამ PP:დამი PP:დან
	    PP:დმი PP:ებრ PP:ებრივ PP:ვით PP:ზე PP:ზედ PP:თან PP:თვის PP:კე
	    PP:კენ PP:მდე PP:მდი PP:მდინ PP:მდის PP:მებრ PP:მი PP:მო PP:ურთ
	    PP:ქვეშ PP:ში PP:შუა PP:წინ Paren Part Pass PassState PastPart
	    PastPart:ნა Perf Period Pers Pfx:მი Pfx:მო Pl Place PluPerf Poss
	    Poss1Pl Poss1Sg Poss2Pl Poss2Sg Poss3Pl Poss3Sg Pot Pp PrePv Pres
	    PresPart Pron Prop Prox Punct Pv Qual Quant Quote Range Rare Recip
	    Refl Rel Rel:ც Rel:ცა RelDist RelMed RelProx Repet Roman Root
	    S:1 S:1Pl S:1Sg S:2 S:2Pl S:2Sg S:3 S:3Pl S:3Sg SIndef SV Semicolon
	    Sent Sg Star Sub Symbol Temp Time Title Tm:ვე Tm:მე Tm:მცა Tm:რე
	    Tm:ღა Tm:ცა Tm:ძი Top Trunc V VComp VN Voc [Excl] [Incl] [OV]
	    <Advb> <AuxIntr> <AuxTrans> <AuxTransHum> <DO:Dat> <DO:Nom>
	    <Dat/Gen> <Dat> <Der:ებრ> <Der:ელ> <Der:ეულ> <Der:იან> <Der:მაგვარ>
	    <Der:ნაირ> <Der:ობრივ> <Der:სა-ო> <Der:უ-ო> <Der:ურ> <Der:ფერ>
	    <Gen> <IO:Dat> <IO:Gen> <Inst> <Nom> <Null> <OldPl> <PP:გან> <PP:თან>
	    <S-DO-IO> <S-DO> <S-IO> <S-OTh-Pred> <S:Dat> <S:Erg> <S:Nom> <S>
            <IO:Obl>
	    Unrecognized Guess <Cand> @NC @CLB $ADDED $ADDED_PP $ADDED_Ind [0]
            MWE <MWE> udMWE <udMWE>
            $Prop $Adv
            Coll
            GLastName # test
	    # dependency relations
	    # >SUBJ
            >CSUBJ:OUTER
            # >COMP >ATR >NUM >POSS >GEN
            >OBJ >OBL
            # >AG
	    # >OBL-COMPAR >APOS >??
     	    # >QUAL >NEG >MODAL >REL >PRED >P >ADV
            >AUX
            # >MWE >QUOTE >VOC
	    >INTERJ
            <UnambGuess> <LMax> <WFMax>
            guess rank VAR:rank VAR:guess
            <Sel>
            $QW
            # UD
            $PAREN
            $SCONJ
            $VERB
            $ADV
            $NA # used to inhibit $ADV rule
            $CLOSED # inhibits child attachment
            >AMOD
            >ADVMOD
            >NUMMOD
            >DET
            >DET:POSS
            >DET:ARG
            >PUNCT
            >ROOT
            >NSUBJ
            >NSUBJ:PASS
            >CSUBJ
            >OBL:IOBJ
            >OBL:TMOD
            >OBL:LMOD
            >OBL:FINAL
            >OBL:ARG
            >NMOD:IOBJ
            >NMOD:PRED
            >ADVMOD:TMOD
            >ADVMOD:LMOD
            >ADVMOD:NEG
            >XCOMP
            >XCOMP:AUX # this will be turned into head with the head becoming >AUX
            >NMOD
            >NMOD:NAME
            >NMOD:AGENT
            >NMOD:ARG
            >OBL:AGENT
            >ADVCL
            >ACL
            >NMOD:POSS
            >CCOMP
            >CCOMP:SPEECH
            >CONJ
            >PARATAXIS
            >OBJ
            >IOBJ
            >CONJ
            >AUX
            >CC
            >CASE
            >ACL:RELCL
            >ADVCL:RELCL
            >MARK
            >VOCATIVE
            >FLAT
            >FIXED
            >APPOS
            >DISCOURSE
            >ARG
            Par
            Prt
            IndSp1 IndSp2 IndSp3
            FALSE
            ;

# ========== #
# Variables  #
# ========== #

# guess: use guesser
# rank:  select highest-ranked reading

SETVARIABLE (guess) (*) ("guess") ;
SETVARIABLE (rank) (*) ("rank") ;

# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<…>" "<;>" "<–>" ;

PARENTHESES = ("<(>" "<)>") ("<[>" "<]>") ;

MAPPING-PREFIX = > ;

# ============= #
# Tags and sets #
# ============= #

# ========
   SETS
# ========

SET BOS = (>>>) | ("<_VAR_>") | Colon ;
SET BOP = (>>>) | ("<_VAR_>") | Comma | Semicolon ;
LIST EOS = "<.>" "<?>" "<!>" "<;>" ;
# SET EOS1 = Period | IntMark | ExclPoint | Ellipsis ;

SET NOM = N | A | Part | Card | SIndef ;
SET NA = N | A ;
SET NADem = N | A | Dem ;
SET NAProp = N | A | Prop ;
SET NAPropPart = N | VN | A | Prop | Part ;
SET NADemProp = N | A | Dem | Prop ;
SET NProp = N | Prop ;
SET NACProp = N | VN | A | Card | Prop ;
SET NCProp = N | VN | Card | Prop ;
SET NACDemProp = N | A | VN | Card | Dem | Prop | Part | SIndef ;
SET NACDemPropPron = N | A | Card | Dem | Prop | (Pron Pers) | Part | SIndef ;
SET ADJ = A | Num ;
SET ADemNum = A | Dem | Num ;
SET APart = A | Part ;
SET NAPart = N | A | Part ;
SET INDEF = (Pron SIndef) | (Pron Indef) ;

LIST IndSp = Encl:IndSp1 Encl:IndSp2 Encl:IndSp3 ;

om-SET PREP = ("<წინაშე>" Pp) | ("<შორის>" Pp) | ("<შემდგომად>" Pp)
       	    | ("<ვიდრე>" Pp) | ("<მიერ>" Pp <Inst>) | ("<შემდგომად>" Pp)
	    | ("<ნაცვლად>" Pp) | ("თანახმად") + Pp ;
n-SET PREP = ("გარდა" Pp) | ("მიუხედავად" Pp) # | ("ვიდრე" Pp) ??
            | ("შემდგომ" Pp)
            | ("თანახმად") + Pp ;

om-SET POSTP = Pp - PREP ;
n-SET POSTP = Pp ;

SET PERSON = Hum | Anthr | Org ;

LIST Money = "ლარ·ი" "დოლარ·ი" "ევრო" "მანეთ·ი" "თუმ[ა]ნ·ი" ;

LIST CASE = Nom Erg Dat Gen Advb Inst Voc Abs Ben Dir ;
LIST CASEnoAdvb = Nom Erg Dat Gen Inst Voc Abs Ben Dir ;
LIST DatAdv = Dat Advb ;
LIST DatGen = Dat Gen ;
LIST NomGenInst = Nom Gen Inst ;
LIST DCASE = DNom DErg DDat DGen DAdvb DInst DVoc ;
LIST DDCASE = DDNom DDErg DDDat DDGen DDAdvb DDInst DDVoc ;

LIST NUMBER = Sg OldPl NewPl ;
LIST NUM = Sg Pl ;

LIST Aux = Encl:Aux ;

LIST IMPV = Impv Impv-I Impv-II ;

LIST PRES = Pres Impf ConjPres ;
LIST FUT = Fut Cond ConjFut ;

SET  PRFUT = PRES | FUT ;

LIST AOR = Aor Opt Conj-II Iter-II Impv ;
LIST PERF = Perf PluPerf ConjPerf ;

LIST OPT = Opt ConjPres PluPerf ConjPerf ;

n-LIST TENSE = Pres Impf ConjPres Fut Cond ConjFut Aor Opt Impv PluPerf ConjPerf ;
om-LIST TENSE = Pres Impf Conj-I Conj-II Conj-III Aor Impv-I Impv-II PluPerf
	       	IterPres IterImpf IterPerf Iter-II Iter-III ;

# Unrecognized is a reading that is added on the fly for tokens without morphology.
# LIST Guess = Guess Unrecognized ;

LIST INTRANS = <S-IO> <S-OTh-Pred> <S> ;

LIST S:1 = S:1Sg S:1Pl ;
LIST S:2 = S:2Sg S:2Pl ;
LIST S:3 = S:3Sg S:3Pl ;

LIST S:Sg = S:1Sg S:2Sg S:3Sg S:3 ;
LIST S:Pl = S:1Pl S:2Pl S:3Pl ;

LIST S:12 = S:1Sg S:2Sg S:1Pl S:2Pl ;

LIST DO:3   = DO:3 DO:3Sg DO:3Pl ;
LIST DO:12  = DO:1Sg DO:2Sg DO:1Pl DO:2Pl ;

LIST IO:12  = IO:1Sg IO:2Sg IO:1Pl IO:2Pl ;
LIST Incl = [Incl] ;

SET NomSg = (Nom Sg) ;
SET NomPl = (Nom Pl) ;
SET ErgSg = (Erg Sg) ;
SET ErgPl = (Erg Pl) ;
SET DatSg = (Dat Sg) ;
SET DatPl = (Dat Pl) ;

LIST AUX = <AuxTrans> <AuxTransHum> <AuxIntr> "ქმნ[ა]/ქმ[ე]ნ" "ქმნ[ა]/ქ[ე]ნ" ;

# verbs (optionally) taking a Hum IO
LIST IOHumV = "და-ბარებ[ა]/ბარ" ;

SET SubCj = ("რომ") OR ("როგორც") + Sub OR ("რათა") OR ("თუ") + Sub OR ("ვაითუ") OR
            ("როცა") OR ("როდესაც") OR ("სანამ") OR ("თითქოს") OR ("თითქოსდა") OR ("თითქო") OR ("თუკი") OR
            ("რამდენადაც") OR ("რადგან") OR ("ვინაიდან") OR ("ვიდრე") OR ("თუმცა") + Cj OR ("თუმც") + Cj OR
            # ("სად") OR
            ("რაც") OR ("რაკი") OR ("რაკიღა") OR ("თუნდაც") + Cj OR ("თუნდა") + Cj OR ("თუნდ") + Cj ;

SET SCONJ = SubCj + Cj + Sub OR ("თუმცა") + Coord ; # თუმცა should be Sub?!

LIST CCompSub = "რომ" "თუ" "ვაითუ" ;

# verbs that can have a PRL
LIST PREDVerb = "ყოფნ\\[ა\\]/.*"r
     	        # Encl:Aux
		"ქონ[ა]/ქონ"
		"ქონ[ა]/ქნ"
     	      	"და·რჩენ[ა]/რჩ"
		"რქმევ[ა]/რქვ"
		"აღმო·ჩენ[ა]/ჩნ"
		"წარმო·დგენ\\[ა\\]/.*"r
		"*·რჩენ[ა]/რჩ"
		"ჯდომ[ა]/ჯდ" # ერთი ლარი უჯდება
		"ღირებ[ა]/ღირ"
		"*·ხდომ[ა]/ხდ"
		"ძახებ[ა]/ძახ"
		"გონებ[ა]/გონ"
		"ჩვენებ[ა]/ჩვენ"
		("ხლებ[ა]/ახლ" MedPass)
                "ხლებ[ა]/ახლ"
                "გამო·დგომ[ა]/დგ"
		;

# verbs that can have a PRED-ADJUNCT, e.g., ცარიელი დატოვა, ღია დამხვდა
LIST PREDADJVerb = "და·ტოვებ[ა]/ტოვ"
     		   "და·რჩენ[ა]/რჩ"
		   "და·ხვდომ[ა]/ხვდ" ;

# TODO: "და" should only be CLB if it conjoins clauses ;-)
LIST CLBwords = "<:>" "<;>" "<.>" "<?>" "<…>" "რომ[ე]ლ·ი" "მაგრამ" "ხოლო" Dash ;
SET CLB1 = ("<,>") | ("<:>") | ("–") | ("<…>") | ("რომ") | ("თუ" Cj Sub) | ("რომ[ე]ლ·ი") ;

# those starting in @ are added by an ADD rule (no longer!)

# how to allow adverbs surrounded by commas (…, მაგალითად, …)? (removed Comma)
SET CLB = CLBwords | Cj + Sub | @CLB ; # not რომ Compl

SET CLBarg = ("და") | Cj + Sub | @CLB ; # not რომ Compl

SET CLBsub = CLB1 | Cj ;

# replace by Coord!
LIST COORD = "<და>" "<ან>" "<ანუ>" "<თუ>" "," ;

LIST FUT-ADV = "ხვალ" "ზეგ" "აწ" ;

SET ErgArg3 =    <S:Erg> + S:3 ;
SET ErgArg3Sg =  <S:Erg> + S:3Sg ;

n-SET NomArg3 =    <S:Nom> + S:3 | <DO:Nom> + DO:3 | Aux ;
om-SET NomArg3 =   <S:Nom> + S:3 | <DO:Nom> + DO:3 ;

SET DatArg3 =   <S:Dat> + S:3
              | <DO:Dat> + DO:3
              | <IO:Dat> + IO:3 ;

SET GenArg  =   (<IO:Gen>) ;

LIST S:Erg = <S:Erg> ;
LIST S:Nom = <S:Nom> ;
LIST S:Dat = <S:Dat> ;
LIST DO:Erg = <DO:Erg> ;
LIST DO:Nom = <DO:Nom> ;
LIST DO:Dat = <DO:Dat> ;
LIST IO:Nom = <IO:Nom> ;
LIST IO:Dat = <IO:Dat> ;

SET DoubleDatArg3 = <S-DO-IO> + DO:Dat + DO:3 + IO:Dat + IO:3 ;

# Verbs having Advb arguments
# these and more
LIST AdvbVerb = "თვლ\\[.*"r
     	      "\\*·თვლ\\[.*"r
     	      "ჩა·თვლ\\[.*"r
	      "მი·ჩნევ\\[.*"r
	      "მი·ჩენ[ა]/ჩნ"
              "და·სახვ[ა]/სახ"
	      <AuxIntr>
	      Encl:Aux ;

# defines COMPVerb, verbs that can have a CCOMP;
# list has to be edited more! These are only DO-Comps
# INCLUDE comp-verb.cg3 ;

LIST CCompV = "ფიქრ·ი/ფიქრ" "მი·ხვდომ[ა]/ხვდ" "და·ნახვ[ა]/ნახ" "გამო·სვლ[ა]/დი" "იმედოვნებ[ა]/იმედოვნ"
              "თქმ[ა]/თქვ" "თქმ[ა]/თხ[ა]რ" "მო·ხსენებ[ა]/ხსენ" "*·ცხადებ[ა]/ცხად" "*·ჩენ[ა]/ჩან"
              # "*·რწმუნებ[ა]/რწმუნ"
              "*·ტყობ[ა]/ტყ" "გა·ხსენებ[ა]/ხსენ" "თქმ[ა]/მბობ"
              "გა·ხსენებ[ა]/ხსენ" "გრძნობ[ა]/გრძნ" "სმენ[ა]/სმ" "ცოდნ[ა]/ც" "აღიარებ[ა]/ღიარ"
              "პატიებ[ა]/პატი" "გრძნობ[ა]/გრძვნ" "ჯერებ[ა]/ჯერ" "*·ხვდომ[ა]/ხვდ" "წარმო·დგენ[ა]/დგინ"
              "სწავლ[ა]/სწავლ" "თქმ[ა]/თხ[ა]რ" "და·ფიცებ[ა]/ფიც" "ნდომ[ა]/ნდ" # "ცდილობ[ა]/ცდილ"
              "გრძნობ[ა]/გრძ[ე]ნ" "მო·ლაპარაკებ[ა]/ლაპარაკ" # "და·რწმუნებ[ა]/რწმუნ"
              "შე·ტყობ[ა]/ტყ" "*·მტკიცებ[ა]/მტკიც"
              "*·ხედვ[ა]/ხედ" "გა·გებ[ა]/გ" "*·წყვეტ[ა]/წყვეტ" "შე·მჩნევ[ა]/მჩნ[ევ]"
              "წინასწარმეტყველებ[ა]/წინასწარმეტყველ" "შიშ·ი/შიშ" "თქმ[ა]/ტყვ" "სწავლებ[ა]/სწავლ"
              "და·მტკიცებ[ა]/მტკიც" "წამებ[ა]/წამ" "იმედოვნებ[ა]/იმედოვნ" ;

# Sets
# ====

# Noun sets

n-SET QUAL = N + Qual + Att ;
om-SET QUAL = N + Qual ;

SET Head = NAProp - Att - PP
    	 | Pron + Pers + 3 - PP
    	 | Pron + Rel - PP
	 | Pron + Refl - PP
	 | Pron + Int - PP
	 | Pron + Recip - PP
	 | Pron + Neg - PP
	 | Pron + Indef - PP
	 | Pron + SIndef - PP
         | Pron + Dem - Att - PP
         | Pron + Poss - Att - PP
         | Pron + Par - Att - PP
         | Num - PP
         | Pron + Refl
         | $Prop ;

SET NomHead = Head + Nom ; # OR Head + DNom ;
SET DatHead = Head + Dat ; # OR Head + DDat ;
SET ErgHead = Head + Erg ; # OR Head + DErg OR Head + DDErg ;
SET InstHead = Head + Inst ;
SET GenHead = Head + Gen ;

LIST NomStem = ".*(ი|ა|ე|ო|უ|].*)"r ;
SET bareStem = (*) - (".*(·ი|\\])"r) ;

SET PronDem = Pron + Dem ;

# ======== #
  SECTION  #
# ======== #

SELECT <Sel> ; # select manually disambiguated reading

# doesn’t work
# SELECT (<guess=MAX>) IF (0 VAR:rank) ;

SELECT (<WFMax>) IF (0 VAR:rank) ;


# split off enclitic copula verb
#ADDCOHORT ("<_ა>" "ყოფნ[ა]/არ" [0] V MedPass Pres <S> <AuxIntr> <S:Nom> S:3Sg Encl)
#	  AFTER Aux IF (0C Aux) (NOT 1 (Encl)) ;

#ADD ($ADDED) (*) IF (NOT 0 ($ADDED)) (1 (Encl)) ;

# MWEs
# … are now treated in the morphology

# LIST MWE = 2:Cj 2:Sub 2:Adv ;

# SELECT MWE ;

# REMCOHORT Adv IF (-1 MWE) ;

# TODO: these readings should be removed in the morphology
REMOVE <S> - (<AuxIntr>) IF (0 (<AuxIntr>)) ;
REMOVE <S-DO> - (<AuxTrans>) IF (0 (<AuxTrans>)) ;
REMOVE <S-DO> - (<AuxTransHum>) IF (0 (<AuxTransHum>)) ;

# Tmesis
# ======

om-LIST TmesisEncl = Tm:მე Tm:ცა Tm:ღა Tm:ვე Tm:მცა Tm:ძი Tm:რე ; 

om-REMOVE TmesisEncl IF (NOT 0 (<TmInfix>)) ;

# select name type coming from name@type
SELECT (<Name>) IF (NOT 0 Punct) ;

# test
# REMOVE Nom - Att ;

# remove derivations if they are in the main lexicon

REMOVE (<Der:ულ>) ;
REMOVE (<Der:ელ>) ;
REMOVE (<Der:მაგვარ>) ;
REMOVE (<Der:ებრ>) ;
REMOVE (<Der:ეულ>) ;
REMOVE (<Der:ფერ>) ;
REMOVE (<Der:ნაირ>) ;
REMOVE (<Der:ობრივ>) ;
REMOVE (<Der:სა-ო>) IF (0 A - <Der:სა-ო>) ; # but keep if no A reading in lexicon

# Errors or very rare ones, absolute selects/removes

REMOVE DO:3 + INTRANS ; # იზრდება, დაიღალა bug

n-REMOVE Aor + Dialect + ("<ე.+>"r) ; # ეწერა etc., fix in morphology!

n-REMOVE (IterImpf) ;
n-REMOVE (IterPres) ;
# n-REMOVE (IterAor) ;
# n-REMOVE (ImpvAor) ;

SELECT ("თვით") + Adv + Foc + Encl:ვე ; # თვითვე

REMOVE (Rel Encl:მე) ;

n-REMOVE Guess + Prop - FirstName + bareStem ;

n-REMOVE ("<.*ის>"r ".*ა"r) ;

select ("სულ") IF (0 Adv);

SELECT V OR Encl:Aux IF (1 ("ხოლმე")) ;

REMOVE ("კურდღ[ე]ლ·ი") + Prop ;
REMOVE ("უბ[ა]ნ·ი") + Prop ;

REMOVE ("უფრო") IF (0 ("უფროს·ი")) ;

SELECT ("მოშორებით") + Adv ;
SELECT ("გაშმაგებით") + Adv ;

REMOVE LastName + Att ;

# ხოლო
REMOVE ("<ხოლო>" N) ;
SELECT ("სამყარო" N) ;
remove ("სული/ს" Part) ;
remove ("ბუზ·ი" Prop) ;
REMOVE ("<არა>" N) ;
n-REMOVE (Abs) IF (NOT 0 PastPart) ;
REMOVE ("<ხართ>" "ხარ·ი") ;
REMOVE ("<ვართ>" "ვარ·ი") ;
REMOVE ("<ერთ>" "ერ·ი") ;
SELECT ("<ერი>" N) ;
o-SELECT ("<მისა>" "ის") ;
o-SELECT ("<დავარდა>" V) ;
remove ("<დათა>" "დ[ა]") ;
remove ("<დადო>" "დ[ა]") ;
om-REMOVE ("პურ[ა]·ჲ") ;
SELECT ("იქ" Adv) ;
SELECT ("ოდენ" Adv) ;
SELECT ("მერმე" Adv) ;
SELECT ("ქვემოთ" Adv) ;
SELECT ("შორს" Adv) ;
REMOVE ("მერმე" V) ;
REMOVE ("ბუნებით" Adv) ;

REMOVE ("უარე") IF (0 ("უარეს·ი")) ;

REMOVE ("ისეთივ[ე]") ; # wrong
REMOVE ("ასეთივ[ე]") ; # wrong

SELECT ("თავისით") + Adv ;

SELECT ("ხვალ") + Adv ;
SELECT ("რ[ა]") + ("<რაშია>") ;

REMOVE ("თვითონ" Pron) ; # Adv Foc only

n-REMOVE ("ჩენ[ა]/ჩნ" Inv S:2Sg Old) ; # გაჩნდა

REMOVE ("უკანა") + Voc ;

REMOVE ("პოვნ[ა]/პოვ") + MedAct IF (0 ("პოვნ[ა]/პოვ") + Act) ;

SELECT <AuxIntr> + S:3Pl ; # არიან

REMOVE ("დარბაზ·ი") + Prop ;
REMOVE ("კავშირ·ი") + Prop ;
REMOVE ("საღამო") + Prop ;

REMOVE ("მხატვ[ა]რ·ი") + Prop ;

REMOVE ("დამ·ი") OR ("დამ[ა]") IF (0 ("და·სმ[ა]/სვ")) ; # დამისვით

REMOVE ("იღ·ი") OR ("იღ[ა]") ; # იღებს

REMOVE ("ჩან·ი") IF (0 ("ჩანთ[ა]")) ;

# თანდათან ყველაფერს
REMOVE Att - ("სხვ[ა]") IF (1 Quant - Att) ;

REMOVE Encl:ღა + Foc + Rel:ც ;
REMOVE ("კარზე") + Adv ;
SELECT ("ძვირ·ი") + A ;
REMOVE ("ქალიშვილ·ი") + Qual ;

SELECT ("თავისთავად") + Adv ;
SELECT ("ზამთრობით") + Adv ;
REMOVE ("დღემდე") + Adv ;
SELECT ("სასჯელ·ი") + N ;
n-REMOVE ("ელ·ი") ;
SELECT ("სრულებით") + Adv ;
SELECT ("სამაგიეროდ") + Adv ;
SELECT ("ნაბიჯ·ი") + N - Meas ; # why Meas?

SELECT ("თუნდაც") ;

SELECT ("კვლავ") + Adv ;
SELECT ("<გარს>" Adv) ;
# remove ("<ვის>" "ვა") ;
SELECT ("<კიდევ>" Adv) ;
SELECT ("<ისევ>" Adv) ;
SELECT ("<აქა>" Adv) ;
SELECT ("<სავსებით>" Adv) ;
SELECT ("განსაკუთრებით" Adv) ;
SELECT ("საგ[ა]ნ·ი") IF (0 ("საგ[ა]")) ;
REMOVE ("ეს[ე]" N) ;
# SELECT ("ესე" Pron) ;
REMOVE ("<ესე>" V) ;
SELECT ("<ესე>" Adv) IF (1 ("<იგი>")) ;
# om-REMOVE ("<ესე>" Adv) ;
SELECT ("უცებ" Adv) ;
REMOVE ("მი") ;
REMOVE ("ნ[ა]") ;
SELECT ("შინისკენ") ;
SELECT ("<ლამის>" Adv) ;
# SELECT ("ყოვ[ე]ლ·ი") ; # ??
SELECT ("ანდა" Cj) ;
REMOVE ("დრო" Old) ;
REMOVE ("იყო" N) ;
o-REMOVE ("იყო·ჲ" N) ;
n-REMOVE (".*სლვ\\[ა\\]"r) ;
REMOVE ("იყ·ი" N) ;
REMOVE ("მი·მართულ·ი/მართ" A Part Pl) ; 
REMOVE ("<დიდი>" V) ;
REMOVE ("ვ·ი") ; # ვით
REMOVE ("<მუნ>" N) ;
o-SELECT ("<თქუენ>" Pron) ; # not V (??)
REMOVE Att + Encl:IndSp3 ;
REMOVE Qual + Encl:IndSp3 ;
REMOVE ("ბე") + Encl:IndSp3 ; # ბესო
REMOVE ("კო") + Encl:IndSp3 ;
REMOVE ("კა") + Encl:IndSp3 ;
REMOVE ("ნოტ·ი") + Encl:IndSp3 ;
REMOVE ("რტო") + Encl:IndSp3 ;
REMOVE ("თ[ე]") + Encl:IndSp3 ; # თითო
SELECT ("<მეც>" Pron) ;
REMOVE ("<უთო>") + Encl:IndSp3 ; 
SELECT ("<ვინ>" Pron) ;
o-SELECT ("<ესმა>" V) ;
SELECT ("<უკუე>" Adv) ;
SELECT ("შედარებით" Adv) ;
SELECT ("მად[ა]" N) ;
SELECT ("წიგნ·ი") ; # not: წიგნა·ჲ
SELECT ("<ამდენად>" Adv) ;
SELECT ("მაშინვე" Adv) ;
SELECT ("დროებით" Adv) ;
SELECT ("<იმაზე>" Pron) ;
REMOVE ("ბუნ·ი" Pl) ;
SELECT ("მართლაც") ;
o-SELECT ("<ესე>" Pron) ;
n-REMOVE ("<აბა>" N) ;
n-REMOVE ("რამე" Adv) ;
n-REMOVE ("რამ[ე]" A Sg) ;
on-REMOVE ("ვის·ი") ;
REMOVE ("არსად") + Adv + Mann ;
SELECT ("თვალ·ი") + N - Att IF (-1 ("ცალ·ი") + Att) ;
SELECT ("ცალ·ი") + A + Att IF (1 ("თვალ·ი") + N) ;

REMOVE ("რაღაც") + Att IF (1 Punct) ;

REMOVE ("წვერ·ი") + Prop ;

REMOVE ("არავ·ი") IF (0 ("არავინ")) ;

REMOVE ("ოქრო") + Prop ;

REMOVE ("ოთხ·ი") + N ;

SELECT ("შენისთანა") ;

REMOVE ("ჭერ·ი") + Prop ;

SELECT ("ალბათ" Adv) ;

SELECT ("ზოგ·ი" A) ;

# SELECT ("რამდენ·ი") + Rel ;

REMOVE ("იმით") ; # ის

REMOVE ("მიკროსკოპ·ი") + Prop ;
REMOVE ("განათლება") + Prop ;
REMOVE ("საქართველო" <Der:სა-ო>) ;

REMOVE ("მის") IF (NOT 1 Prop) ;
REMOVE ("საკუთ[ა]რ·ი") + N IF (1 N) ;

REMOVE ("ხევ·ი" Prop) ;

REMOVE ("როდი") + L ;

REMOVE ("მემკვიდრეობით") + Adv ;
SELECT ("წარმო·დგენ[ა]/დგენ" Pres) ; # not Fut

SELECT ("ჩუმ·ი") + A + Advb ; # ჩუმად

SELECT ("თომასი") ;

SELECT ("საკუთრებ[ა]") ; # not VN

SELECT ("საიმედო") + A ;

REMOVE ("აქა") IF (0 ("აქ")) ;

REMOVE ("დილა") ; # keep დილ[ა]

SELECT ("უაღრეს·ი") + A + Elat + Advb IF (1 A) ;

SELECT ("რესტორ[ა]ნ·ი") ; # and not რესტორან·ი

REMOVE ("ჩა·დენილ·ი/დენ") ; # mostly want ჩადენილ·ი/დენ

SELECT ("მოგვიანებით") + Adv ;
SELECT ("მოედ[ა]ნ·ი") ;
REMOVE ("რამ·ი") ; # = ramie (Bœhmeria nivea)
REMOVE ("რამ[ა]") ; # = med † conjunctivitis
REMOVE ("მეფ[ე]" Prop) ; # King Tamar only
REMOVE ("ხალხ[ა]") ; # stick for harvesting walnuts
REMOVE ("წყლისა") ; # mastitis
REMOVE ("წყლისა·ჲ") ; # mastitis
REMOVE ("<მყავს>" N) ; # მყავი forest dormouse
n-REMOVE ("დარჩ[ა]" N) ; # old: VN punishment
n-SELECT ("ამერიკ[ა]" Prop) ;
# o-REMOVE ("მეფის[ა]·ჲ") ; # prelim
om-REMOVE ("<არს>" Abs) ;
o-REMOVE ("ამა·ჲ" N) ;
om-REMOVE ("<შენ>" N) ;
REMOVE ("<შენი>" N) ;
REMOVE ("<დიდის>" V) ;
REMOVE ("<ვიცი>" Iter-II) ;
REMOVE ("სულ·ი/ს" Part) ;
REMOVE ("სობ[ა]/ს" PassState) ; # ესე
REMOVE ("ესე" N) ; # ესე
REMOVE ("ვ[ა]" N) ; # ვითა
# SELECT ("ვის·ი" Pron) ; # but: ვის
REMOVE ("კან·ი" A) ; # Kk a pl “good men”
REMOVE ("როგორ" Rel) ; # remove from morphology!
REMOVE (Int Rel:ც) ; # რომელსაც why is this Int in the first place??
SELECT ("<რათა>" Cj) ;
REMOVE ("რომლ·ი") ;
om-SELECT ("მუნ") ;
om-REMOVE ("<გინა>" N) ;
REMOVE ("ვეღარ[ა]" A) ;
REMOVE ("თავ[ა]") ;
REMOVE ("ვითარ·ი") ;
REMOVE ("ერთობ" Adv L);
o-SELECT ("ვითარცა") ; 
SELECT ("<სადაც>" Rel) ;
SELECT ("ახ[ა]ლ·ი" A) ;
SELECT ("<ამაო>" A) ;
SELECT ("<ასევე>" "ასევე") ;
REMOVE ("<ვერა>" N) ;
REMOVE ("<იყოს>" N) ;
REMOVE ("კაც·ი" A) ;
REMOVE ("<თანა>" L) ;
REMOVE ("<თანა>" N) ;
REMOVE ("ნელ-ნელ" L) ;
om-REMOVE ("ხელ·ი" A) ;
REMOVE ("ამბავი" Adv) ;
REMOVE ("<ამას>" N) ;
SELECT ("მარტო" Adv) ;
SELECT (".+ისას"r Adv) ; # prefer Adv reading to full analysis
SELECT ("განა" Adv) ;
SELECT ("მალე" Adv) ;
SELECT ("ბოლოს" Adv) ;
SELECT ("არადა" Cj) ;
SELECT ("ეგრევე" Adv) ;
SELECT ("კიდეც" Adv) ;
SELECT ("<ესეც>" Pron) ;
REMOVE ("მართლ" L) ;
SELECT ("<ხელის>" N) ;
SELECT ("ბავშვ·ი" N) ;
SELECT ("გია" Prop) ;
REMOVE ("ისა" N) ;
REMOVE ("ის[ა]" N) ;
SELECT ("<მიდის>" "მი·სვლ[ა]/დი") ;
SELECT ("<მოდის>" "მო·სვლ[ა]/დი") ;
SELECT ("<რომე>" "რომე") ;
SELECT ("<რასაც>" "რ[ა]") ;
SELECT ("<თუმცა>" "თუმცა") ;
SELECT ("<მან>" Pron) ;
REMOVE ("აღდგომ[ა]" Prop) ;
SELECT ("თაობაზე" Pp) IF (-1 Gen) ;
SELECT ("შესახებ" Pp) IF (-1 Gen) ;
SELECT ("თაობ[ა]") ; # not თავობა
SELECT ("კაი") ;
SELECT ("რუს·ი") ;
REMOVE ("წეს[ა]") ;
REMOVE ("მამა" Gen) ;
nm-REMOVE ("წყლ[ა]") ;
om-REMOVE ("წყლ[ა]·ჲ") ;
REMOVE ("<ცა>" V) ;
SELECT ("შავლეგო") ;
SELECT ("<ვაშლი>" N) ; # ??
SELECT ("<იგინი>" Pron) ;
SELECT ("<ამის>" "ეს") ;
SELECT ("დაკავშირებით" Pp) IF (-1 PP:თან) ;
SELECT ("ერთად" Pp) IF (-1 PP:თან) ;
SELECT ("განსხვავებით" Pp) IF (-1 PP:გან) ;
# SELECT ("გარეთ" Adv) ;
SELECT ("სწორედ" Adv) ;
REMOVE ("კან·ი" Prop) ;
REMOVE ("ველ·ი" Prop) ;
REMOVE ("ხეობა" Prop) ;
REMOVE ("ხეობ[ა]" Prop) ;
REMOVE ("პირველ·ი" LastName) ;
SELECT ("ერთგან" Adv) ;
SELECT ("როდესაც" Cj) ;
REMOVE ("რაღ[ა]" Rel) ;
REMOVE ("პატ[ა]რ[ა]") ;
n-REMOVE ("სრულ·ი/სრ" Part) ; 
SELECT ("ზღვ[ა]" N) ;
REMOVE ("ავლ·ი" Advb) ; # გვერდის ავლად
REMOVE ("ავლ·ი" Inst) ; # გვერდის ავლად
mn-SELECT ("საქმ[ე]" N) ;
o-SELECT ("საქმ[ე]·ჲ" N) ;
o-SELECT ("ესერა" Adv) ;
SELECT ("გორ·ი") ;

SELECT ("მანანა" FirstName) IF (1 LastName) ;

# REMOVE ("რომელიმე" A) ; # prelim; remove from morph ??

REMOVE ("*·სმ[ა]/ს") IF (0 ("სმენ[ა]/სმ")) ;

SELECT ("პირ·ი") ; # პირების

SELECT ("მარჩენალ·ი") ; # prefer over "მარჩენ[ა]ლ·ი"

SELECT ("მო·კლებულ·ი/კლ") ; # and not მოკლებულ·ი/მოკლ

SELECT ("და·ღლ[ა]/ღალ" Pass) ; # and not და·ღალვ[ა]/ღალ

SELECT ("კიბორჩხალა") ; # not კიბორჩხალი

REMOVE ("ბიჭა") IF (0 ("ბიჭ·ი")) ;
REMOVE ("ომებ[ა]/ომ") ; # when we have ომ·ი
REMOVE ("ჩვენ·ი") + N ;

SELECT ("გადა·დგმ[ა]/დგ") IF (0* ("ნაბიჯ·ი") BARRIER CLB) ;

SELECT ("დღეს") IF (NOT -1 Att) ;

SELECT ("<ხან>" "ხან") ;
SELECT ("ევროპ[ა]") ;
SELECT ("<უნდოდა>" V) ;
SELECT ("<დღესა>" N) ;
SELECT ("ცხად·ი" A) ;
SELECT ("ადამიან·ი" N) ;
SELECT ("ღმ[ე]რთ·ი" N) ;
SELECT ("დონ[ე]" N) ;
SELECT ("მამ[ა]" N) ; # prefer over მამა
SELECT ("დედ[ა]" N) ;
SELECT ("დიდედ[ა]" N) ;
SELECT ("დედ[ა]·ჲ" N) ;
SELECT ("მამ[ა]·ჲ" N) ;
SELECT ("დიდედ[ა]·ჲ" N) ;
REMOVE ("აქვ·ი" N) ;
SELECT ("<აქა>" "აქა") ;
om-SELECT ("<ოდეს>" Adv) ;
SELECT ("გენაცვალე" Interj) ;
SELECT ("ვენაცვალე" Interj) ;
SELECT ("ორ·ი" Num) ; # ორად
SELECT ("კაც·ი") ; # კაცო
SELECT ("ზემოთ") ; # ზემოდ
SELECT ("თუნდა") ;
SELECT ("თანაც") ;
SELECT ("ბოლო") ;
# SELECT ("<მერმე>" Adv) ;
SELECT ("ახლოს" Adv) ; # should remove Pp reading altogether: ჩემთან ძალიან ახლოს
#SELECT ("ახლოს" Adv) IF (NOT -1 PP:თან) ;
#SELECT ("ახლოს" <PP:თან>) IF (-1 PP:თან) ;
SELECT ("<უნდოდა>" V) ;
SELECT ("კიდევაც") ;
SELECT ("გაცილებით" Adv) ;
SELECT ("<მეტიც>" Adv) ;
SELECT ("ოდეს[ა]") ;

REMOVE ("კარგ·ი" N) ;

SELECT ("ამასთანავე") ;

SELECT ("გადაჭრით") + Adv IF (1 V) ; # გადაჭრით უარყო

SELECT ("ყვავილ·ი") ; # ყვავილები

REMOVE ("დენ[ა]/დი") IF (0 ("მი·სვლ[ა]/დი")) ;

# todo: find rules for ხანი / ხ[ა]ნი
SELECT ("ხან[ა]") IF (-1 ("<ქვის>") | ("<ყინულოვანი>") | ("<ბრინჯაოს>")) ;

SELECT ("უკანა") + A + $$CASE IF (1 ("მხ[ა]რ·ი") + $$CASE) ;

SELECT (Pron Pers PP) ; # შვენში etc.
SELECT ("თბილის·ი" Prop) ;
SELECT ("ერთ-ერთ·ი" A) ;
SELECT ("ერთხელ" Adv) ; # not ერთხელ·ი
SELECT ("ერთად" Adv) ; # not ერ·ი
SELECT ("წყალქვეშა" A) ;
SELECT ("ნაპირ·ი" N) ; # not *ნაპირ·ი
SELECT ("საყუარ[ე]ლ·ი") ;
REMOVE ("ი·ი") ; # not sure where these come fromბ
REMOVE ("ო·ი") ;
SELECT ("<იამა>" V) ;
REMOVE ("მისგან·ი" A) ;
REMOVE ("აღორძინებ[ა]" Prop) ; # but not in სამუსლიმო ს.!
REMOVE ("შემო·სავლებ·ი/ვლ" Part) ;
n-SELECT ("წერილ·ი") ; # not Part
o-REMOVE ("ერ[ა]·ჲ") ;
SELECT ("ნაშუაღამევს" Adv) IF (NOT -1 A + Dat + Att) ;
SELECT ("არყ·ი") IF (1 ("ხ[ე]")) ; # not არაყი
SELECT ("ლარ·ი") ;
SELECT ("მკვეთრ·ი") ; # remove this!

SELECT A + Gen + Att IF (1 ("მხრივ")) ;
SELECT ("მხრივ") + Adv IF (-1 Att) ;

SELECT ("მძიმ[ე]") + Att + $$CASE IF (1C NA + $$CASE) ;

SELECT ("ცხოვრებ[ა]") ; # not VN

SELECT Dat + PP:ვით ;

SELECT ("მისტერი[ა]") ; # not მისტერ-ი

REMOVE ("ბუ") IF (0 ("ბუღ[ა]")) ;

SELECT ("ძალზე") IF (1 A) ;

# დათას
REMOVE ("დ[ა]") + N + OldPl + DSg ;

# ახალგაზრდა
#REMOVE N + Hum + Qual + Att + $$CASE IF (0 N - Qual + $$CASE) ;

# ახალგაზრდა კაცი
SELECT ("ახალგაზრდ[ა]") + A + Att + $$CASE
    IF (1 Hum + $$CASE) ;

SELECT ("გამო·წვდ[ა]/წოდ") IF (0* ("ხელ·ი") BARRIER CLB) ;
SELECT ("გა·წვდ[ა]/წოდ") IF (0* ("ხელ·ი") BARRIER CLB) ;

# შეუწყოს ხელი
SELECT ("შე·წყობ[ა]/წყ") IF (0* ("ხელ·ი") BARRIER CLB) ;

SELECT ("გა·სმ[ა]/სვ" Act) IF (0* ("ხაზ·ი") BARRIER CLB) ;

n-SELECT Place IF (1 ("გავლით")) ; # რიგის გავლით

REMOVE ("ბებია" LastName) ;
REMOVE ("ბაბუა" LastName) ;
REMOVE ("ბაბუ[ა]" Prop) ;
REMOVE ("ღვედ·ი") + Prop ;
REMOVE ("გალი[ა]" Prop) ;

# could precede A, but have to avoid შემდეგ_A ოდნავ_A განე გადგა
REMOVE ("შემდეგ·ი" A) IF (NOT 1 N) ;

REMOVE ("აღ·ელვებ\\[ა\\].*"r) ; # ა·ღელვება; difficult to remove from morphology

REMOVE ("ა·ძულებ[ა]/ძულ") ; # აიძულა

n-REMOVE ("დარჩ[ა]") ;

n-SELECT ("ერ·ი") IF (-1 ("გა·ერთიანებულ·ი/ერთიან")) ;

REMOVE ("ნათელ·ი/თელ" Part) ; # ნათელი

REMOVE ("შიშ·ი" Prop) ;

SELECT Gen + (PP:ვით) ; # not Dat

SELECT Gen + (PP:დმი) ;

SELECT Dat + (PP:თვის) ; # not Gen if Dat available (ვისთვისაც) 

SELECT ("ვიდრე" Pp) IF (1 PP:მდე) ;

REMOVE ("თვალებ[ა]/თვალ") + N IF (0 ("თვალ·ი")) ;

REMOVE ("მუხლ·ი") + Prop IF (1 Num + Ord) ;

REMOVE ("ქალ[ა]") ; # ქალის
REMOVE ("ქალა") ; # ქალების

REMOVE ("გოჯ·ი") + Prop ; # fortress in Abkhazia

SELECT ("თავისუფლებ[ა]") ;

REMOVE ("გაზ[ა]") ; # გაზის

SELECT ("მორფინ·ი") ; # and not მორფი

SELECT ("ცემ[ა]/ცემ") IF (-1 ("პატივ·ი")) ;

SELECT ("ბალ·ი") IF (-1 Num + Card) ;

SELECT ("<ესმოდა>" "სმენ[ა]/სმ") ; # not "*·სმ[ა]/ს"

SELECT ("აღიარებ[ა]/ღიარ") ; # not აღვლა

SELECT ("რთულ·ი" A) ; # not Part

o-SELECT ("იესუ" Abs) IF (1 ("ქრისტე")) ;

o-REMOVE ("მათგან·ი" Abs) ;

n-REMOVE (Root Encl:Aux) ;

# იყო-მცა. Exceptions?
o-REMOVE ("<.*-მცა>"r VComp) ;

# რქმა is rare
SELECT ("რქმევ[ა]/რქვ") ;

SELECT ("სმენ[ა]/სმ" Inv) IF (0C ("სმენ[ა]/სმ")) ; # მესმის etc., but not ესმა FirstName

# ?
m-SELECT ("<იყო>" "ყოფნ[ა]/ყ[ავ]") ;

o-SELECT ("შენ" Pron Pers) IF (-1 Pp) ;

SELECT ("შალვა" Anthr) ;

SELECT ("<უფალო>" N) ;

SELECT ("<ჩვენთან>" "ჩვენ") ;

SELECT ("<მისმა>" Pron) IF (1 Erg) ;

REMOVE ("ძველ·ი" Prop) ;

REMOVE ("მთელ·ი" N) IF (NOT -1 Num + Card) ;

SELECT ("თვით" Adv) IF (NOT -1 Num) (1 NA) ;

SELECT ("პროვოცირებ[ა]/პროვოცირ" VN) ;

SELECT ("მეტ·ი" A) ;

#SELECT ("მეტ·ი" A) IF (-1 ("უფრო")) ;
#SELECT ("მეტ·ი" A) IF (1 ("ვიდრე")) ;

SELECT ("მით") IF (1 ("უფრო")) ;
SELECT ("რაც") + Adv IF (1 ("უფრო")) ;

SELECT ("ნაკლებ·ი") ; # refine!

SELECT ("აქ") IF (1 ("და")) ;

SELECT ("ხევ·ი") IF (-1 Prop + Gen) ;

SELECT ("მისიან·ი") ;

REMOVE ("უბ[ა]ნ·ი") + Prop IF (-1 Prop + Gen) ;

# check syntactic status of რაღაც
# SELECT ("რაღაც") - Att ??

# for plays (…. მანანა.)
SELECT FirstName IF (-1 BOS) (1 Period) ;

REMOVE Prop IF (-1 Ord - Roman) ;

# more such?
SELECT ("მდგარ·ი/დგ" A) IF (-1 PP:ზე) ; # not N

SELECT ("ბოლო" N)
    IF (-1 Gen)
       (NOT 1 N) ;

# m-REMOVE Att ;
m-REMOVE Dir ; # ??
m-REMOVE Ben ; # ??

om-REMOVE ("<მათ>" Abs) ;

om-REMOVE (Encl:ც) ;

SET NegPlain = ("არ") | ("ვერ") | ("ნუ") ;

REMOVE ("რა" Interj)
        IF (1 V | NegPlain | CASE) ;

# should better be Adv Disc or Sent?
SELECT ("რა" Interj)
       IF (-1 Comma)
       	  (1 Comma) ;

# არა იცის რა
n-SELECT ("რა" SIndef)
    IF (-1 V)
       (NOT 1 V) ;

n-SELECT ("რა" SIndef)
    IF (-1 Pron + Indef + Att) ;

# not sure about OG
REMOVE ("რა" SIndef) ;

SELECT Elat IF (-1 ("<მით>")) ;

SELECT ("ცოტა" A)
    IF (1 ("არ"))
       (2 ("<იყოს>")) ;

# Adv/Part disambiguation
# ------------------------

n-SELECT (Adv Mann)
    IF (0 APart + Advb)
       (NOT 0 (Adv Loc))
       (NOT 0 V)
       (NOT 0 Pp)
       (NOT -1 Neg)
       (NEGATE 0* AdvbVerb BARRIER CLB)
       (NEGATE 0 A + Dat LINK 1 N + Dat)
       (NEGATE 0 A + Nom LINK 1 N + Nom) ;

# Adv/A/Pron/N disambiguation
# ------------------------

SELECT Adv + DegNum
    IF (1 Num) ;
REMOVE Adv + DegNum
    IF (NOT 1 Num) ;

# შედარებით დაბალი
SELECT Adv + Deg
    IF (1 A) ;

REMOVE ("ერთმანეთზე") IF (NOT -1 Temp) ;

SELECT ("დღ[ე]") + N + $$CASE
    IF (-1 ADemNum + $$CASE) ;

# -ად Adv vs. A Dat Att
#n-REMOVE ("<.*ად>"r) + A + Att + $$CASE
#    IF (0 Adv)
#       (NOT 1 $$CASE) ;

n-REMOVE A + $$CASE
    IF (0 Adv)
       (NEGATE 0 Nom LINK 1 <AuxIntr>) # ნასვამი იყო
       (NEGATE 0 Nom LINK 1 Neg LINK 1 <AuxIntr>) # ნასვამი არ იყო
       (NOT 1 $$CASE)
       (NOT 1 Comma)
       (NOT 1 Coord) ;

# too general?
om-SELECT ("მის·ი" Pron Poss) - Abs IF (-1 N) ;

# focus adverb
SELECT ("<თვით>" Adv) IF (1 CASE) ;

SELECT Adv + Sent IF (1 Comma) (-1 BOS) ; 

SELECT ("თითქოს") + Adv IF (-1* Cj + Sub BARRIER V) ;

SELECT ("თუნდა" Cj) IF (1 Opt) ;
SELECT ("თუნდა" Cj) IF (1 Neg) (2 Opt) ;
SELECT ("თუნდ" Cj) IF (1 Opt) ;
SELECT ("თუნდ" Cj) IF (1 Neg) (2 Opt) ;

REMOVE Cj + Sub IF (1* Cj + Sub BARRIER V) ;

# ??
REMOVE Adv + Sent IF (NOT 1 Comma) ; 

# expand
REMOVE ("ძველ" Adv) IF (1 DatAdv) ;
REMOVE ("ერთ" Adv) IF (1 DatAdv) ;
REMOVE ("პირველი" Adv) IF (1 NomGenInst) ;

REMOVE ("ერთი" Adv) IF (1 NomGenInst) ;

REMOVE Inst IF (0 Adv) (NOT 1 Inst) ;

# ეს can be Adv in ეს არის
REMOVE ("<ეს>" Adv) IF (NOT 1 ("<არის>")) ;

REMOVE ("ერთ-ერთ·ი" Num Card) ;

SELECT ("დღემდე" Adv)
    IF (NOT -1 Advb) ;

# suppress 175 -> 1-75 etc.
REMOVE (Range) ;

n-SELECT Meas + $$CASE - Money
      IF (-1 Num) 
         (1 $$CASE - Pron) ;

# Adv/Advb disambiguation
# ------------------------

REMOVE Advb
    IF (NOT 0 Trunc)
       (NOT -1 Advb + Att)
       (NOT 1 Advb)
       (NOT 1 ("ქცევ[ა]/ქც[ევ]")) 
       (0 Adv) ;

REMOVE N + Advb
    IF (0 A + Advb - Old)
       (NOT -1 PREP + <Advb>)
       (NOT 1 POSTP + <Advb>)
       (NEGATE 0* AdvbVerb BARRIER CLB) ;

REMOVE A + Advb + Old
    IF (0 N + Advb - Old) ;

# Pron/Dem disambiguation
# ------------------------

om-REMOVE Dem + $$CASE
       IF (NOT -1 $$CASE)
	  (NOT 1 $$CASE) ;

om-SELECT Dem + $$CASE + $$NUMBER
       IF (-1 $$CASE + $$NUMBER) ;

# too general?
n-SELECT Dem + $$CASE
      IF (1 $$CASE)
         (NOT 1 Pron + Int) ;

n-SELECT ("დრო") + N + $$CASE IF (-1 Dem + $$CASE) ;

# დრო და დრო Adv
n-SELECT ("დრო") + N + Nom IF (NEGATE 1 ("და") LINK 1 ("დრო")) ;

# Reflexives

REMOVE ("თავ·ი") + Refl + Att ;

om-SELECT ("თავ·ი" Pron) + $$CASE IF (1 ("თჳს·ი" Refl) + $$CASE) ; 
om-SELECT ("თჳს·ი" Refl) + $$CASE IF (-1 ("თავ·ი" Pron) + $$CASE) ; 

# many more of those
TEMPLATE GenCompound = (1 ("უბ[ე]") LINK 1 ("წიგნაკ·ი")) ;

# თავისი უბის წიგნაკი
SELECT ("თავის·ი") + Refl + Att + $$CASE
       IF (T:GenCompound)
          (1 Gen)
          (2C $$CASE) ; 

SELECT ("თავის·ი" Refl) + $$CASE IF (1C $$CASE) ; 
SELECT ("თავის·ი" Refl) + $$CASE IF (1 Quote LINK 1C $$CASE) ; # თავისი „სტილით”

n-SELECT ("თავ·ი") + Refl + $$CASE
    IF (-1 Refl + $$CASE) ;

SELECT ("თავ·ი") + N + $$CASE
    IF (-1 ADemNum + $$CASE) ;

SELECT ("თავ·ი") + N + $$CASE
    IF (1C ADemNum + $$CASE) ;

# დამიდგა თავზე
SELECT ("თავ·ი") + N + PP:ზე
    IF (0* ("და·დგომ[ა]/დგ") BARRIER CLB) ;

LIST TaviNVerb = "და·ნებებ[ა]/ნებ" "გა·ქნევ[ა]/ქნ[ევ]" "*·ნებებ[ა]/ნებ" ;

n-SELECT ("თავ·ი") + N - PP
    IF (0* TaviNVerb BARRIER CLB) ;

n-SELECT ("თავ·ი") + N
    IF (NEGATE 0* V) ;

# Names
# ------------------------

# აფხაზები
REMOVE (LastName Pl) ;

#SELECT (".*([a-zA-Z]).*"r) + Org + Guess ;

REMOVE (".*(ა|ე|ი|ო|უ).*"r) + Org + Guess ;

REMOVE (".*[0-9].*"r) + Anthr + Guess ;

LIST AreaGenAtt = "დედაქალაქ·ი" "ზღვ[ა]" "ხეობ[ა]" ;

n-ADD (Top Area <Cand>) TARGET Prop + Gen - Anthr + Guess - <Cand>
   IF (1 AreaGenAtt) ;

# ქართველი
n-REMOVE LastName - Guess
	 IF (NOT -1 FirstName)
	    (NOT -1 QUAL)
	    (NOT -1 Anthr + Abbrev) ;

LIST PlaceQual = "ქალაქ·ი" "დედაქალაქ·ი" "სოფ[ე]ლ·ი" "კურორტ·ი" "აულ·ი" ;


SELECT Place IF (-1 PlaceQual) ;
SELECT Place + Gen IF (1 ("დედაქალაქ·ი")) ;

# obsolete!
SELECT ("<ქ.>" "ქალაქ·ი") IF (1 (Place)) ;
SELECT ("<წ.>" "წელთაღრიცხვ[ა]") IF (-1 ("<ძვ.>") ) ;
SELECT ("<წ.>" "წელთაღრიცხვ[ა]") IF (-1 ("<ჩვ.>") ) ;
SELECT ("<წ.>" "წელთაღრიცხვ[ა]") IF (-1 ("<ახ.>") ) ;
SELECT ("<ქ.>" Anthr) IF (1 Anthr) ;
SELECT ("<წ.>" Anthr) IF (NOT -1 (Card Digits)) ;

# INCLUDE place-head.cg3 ;

LIST PlaceHead = "ქ." "რაიონ·ი" "რეგიონ·ი" "მერ·ი" "მერი[ა]" "საკრებულო" "უნივერსიტეტ·ი" "ქუჩ[ა]"
                 "მუნიციპალიტეტ·ი" "სასამართლო" "მოსახლეობ[ა]" "პოლიცი[ა]" "ცენტრ·ი" "ხელისუფლებ[ა]"
                 "აეროპორტ·ი" "ციხ[ე]" "თეატრ·ი" "პორტ·ი" "ოლქ·ი" "შე·თანხმებ[ა]/თანხმ" # "შეხვედრ[ა]"
                 "ტერიტორი[ა]" "ბაზ[ა]" "თას·ი" "ხელშეკრულებ[ა]" "ოფის·ი" # "საუბ[ა]რ·ი/საუბრ"
                 "მისი[ა]" "მხ[ა]რ·ი" "სკოლ[ა]" "ხეობ[ა]" "მიმართულებ[ა]" "ბიუჯეტ·ი" "რეჟიმ·ი"
                 "წარმომადგენ[ე]ლ·ი" # "პრობლემ[ა]"
                 "ფილიალ·ი" "პროკურატურ[ა]" "ოპერ[ა]" "გამგეობ[ა]" "გზ[ა]" "წყ[ა]ლ·ი" "ტაძ[ა]რ·ი"
                 "ხელმძღვანელობ[ა]/ხელმძღვანელ" "ეკლესი[ა]" "ტურნირ·ი" "მერობ[ა]" "კლუბ·ი" "საავადმყოფო"
                 "სახელობ[ა]" "თავმჯდომარ[ე]" "გამგებ[ე]ლ·ი" "მონასტ[ე]რ·ი" "მთ[ა]" "ფონდ·ი" "მკვიდრ·ი"
                 "ბაზ[ა]რ·ი" "ომ·ი" "პროვინცი[ა]" "კონფერენცი[ა]" "ისტორი[ა]" "ადმინისტრაცი[ა]"
                 "გარეუბ[ა]ნ·ი" "და·ცემ[ა]/ცემ" "გან·ვითარებ[ა]/ვითარ" "მხარ[ე]" "პრეზიდენტ·ი" # "აზრ·ი"
                 "ბაზრობ[ა]" "სტადიონ·ი" "ბიურო" "ეპარქი[ა]" ;

SELECT Place + Gen IF (1 PlaceHead) ;

om-SELECT ("<იესუ>" Abs) IF (1 ("ქრისტჱ")) ;

# obsolete
n-SELECT ("<სს>" "სააქციო საზოგადოებ[ა]")
      IF (1 Quote OR Org) ; 

REMOVE ("სულ·ი" A) ;
SELECT ("სულ·ი" N) ;
REMOVE ("გულ·ი" A) ;
REMOVE ("ენ·ი") ;

REMOVE ("ცოტა" A) ; # ცოტა is Quant

REMOVE ("<ხარ>" "ხარ·ი") ;
REMOVE ("განა" Prop) ;
# remove ("მთელ·ი" A) ; # should only be ALLQ

# REMOVE (AInt C) ;
# REMOVE ("იქნებ" L) ;

select ("სახელ·ი" N) ;

# SELECT ("ყოფნა") ;

REMOVE ("ს·ი") ;
REMOVE ("<ზოგი>" Adv) ;
SELECT ("<არის>" V) ;
SELECT ("<უფრო>" Adv) ;
SELECT ("<გამო>" "გამო") ;
SELECT ("<თავიანთ>" "თავიანთ·ი") ;
REMOVE ("მ·ი") ;
REMOVE ("მა") ;
REMOVE ("<კაცი>" Inst) ;
REMOVE ("ზედ" Mann) ;
REMOVE ("<ზედ>" A) ;
SELECT ("<გაათავე>" V) ;
REMOVE ("<იქნება>" Adv) ;
REMOVE ("პირველი" Adv) IF (NOT 1 Comma) ;
REMOVE ("პირველი" Adv) IF (NOT -1 BOS) ;

SELECT ("ქონებ[ა]") ;

# should this be a MWE?
SELECT ("უპირველეს" Adv)
    IF (1 ("<ყოვლისა>")) ;

SELECT ("სანამ" Cj) ;
SELECT ("<რომ>" Cj)
    IF (-1 Comma) ;

REMOVE (Rare) ;

REMOVE (Imperfective) ;

SELECT ("დღეს" Adv)
    IF (NEGATE 0* DatArg3 BARRIER CLB)
       (NOT -1 Gen) ;

SELECT ("დღეს" Adv)
    IF (0* NACDemPropPron + Dat BARRIER CLB)
       (NOT -1 Gen) ;

SELECT ("დაახლოებით" Adv)
    IF (1 Num) ;

# შვიდი დღე
SELECT ("<დღე>" N) + $$CASE
    IF (-1 Num + Card + $$CASE) ;

# prelim.
#n-SELECT (Gen L) ;

om-SELECT (Gen L)
       IF (1C Gen) ;

# წმიდისა იოვანე ოქროპირისაჲ
om-SELECT (Gen L)
       IF (1 Anthr + Abs)
       	  (2 Gen) ;

# კარგად
SELECT ("კარგ·ი" A Advb Sg) ;
SELECT ("ცუდ·ი" A Advb Sg) ;

SELECT ("ერთ·ი" A Gen) if (1 ("მხრივ" Pp)) ;

SELECT (N Temp)
    IF (-1 (Card Digits)); 

REMOVE (V Encl:რა) ;
REMOVE (V Encl:მდა) ;

# Early and popular rules

# არ, ნუ, ვერ, etc., but not არც, ...
n-SELECT V
      IF (-1 Neg)
         (NOT -1 (Encl:ც))
	 (NOT -1 Aux)
	 (NOT 0 Modal) ;
om-SELECT V if (-1 Neg) (NOT -1 (Encl:ცა)) ;

# necessary?
SELECT Neg if (1 V) ;

SELECT Neg if (-1 ("თუ")) ;

SELECT ("ოღონდ" Coord) ; # prelim

SELECT ("<არა>") + Adv + Neg IF (-1 ("ოღონდ")) ;

# ვერც ერთი
SELECT (Neg Encl:ც) IF (1 ("ერთ·ი")) ;
SELECT ("ერთ·ი") IF (-1 (Neg Encl:ც)) ;

# , თუ ვინ/ვისი/სად…
#n-SELECT ("თუ") + Cj + Sub
#    IF (-1 BOP)
#       (1 Int);

# refine this!
n-SELECT ("თუ" Adv)
	IF (-1 ("<იშვიათად>") OR ("<ძნელად>") OR ("<ნაკლებად>"))
	   (1 V) ;

SELECT ("თუ") + @NC
    IF (-1 ("ასე"))
       (1 ("ისე")) ;
    
# არც თუ ისე
n-SELECT ("თუ" Adv)
	IF (-1 Neg + Foc)
	   (1 ("<ისე>")) ;

# missing: conditions for თუ adv
n-SELECT ("თუ" Cj Sub)
    IF (-1 BOS) ;

n-SELECT ("თუ" Cj Sub)
    IF (-2 BOS)
       (-1 Quote) ;

n-SELECT ("თუ" Cj Sub)
    IF (-1 ("რომ")) ;

n-SELECT ("თუ" Cj Sub)
    IF (-1 ("და" Cj)) ;

# და, თუ…
n-SELECT ("თუ" Cj Sub)
    IF (-2 Cj)
       (-1 Comma) ;

n-SELECT ("თუ" Cj Sub)
    IF (1 V) ;

# … თუ არა
n-SELECT ("თუ" Cj Coord)
    IF (1 Neg + L)
       (-1 V OR Aux) ;

n-SELECT Neg + L
    IF (-1 ("თუ" Cj Coord)) ;

n-SELECT ("ეს") + $$CASE
    IF (1 ("თუ"))
       (2 ("ის") + $$CASE) ;

n-SELECT ("თუ" Cj Coord)
    IF (-1 ("ეს") + $$CASE)
       (1 ("ის") + $$CASE) ;

n-SELECT ("ეს") + $$CASE
    IF (1 Comma)
       (2 ("თუ"))
       (3 ("ის") + $$CASE) ;

n-SELECT ("თუ" Cj Coord)
    IF (-1 ("ეს") + $$CASE)
       (1 ("ის") + $$CASE) ;

n-SELECT ("თუ" Cj Coord)
    IF (-1 Comma)
       (-2 ("ეს") + $$CASE)
       (1 ("ის") + $$CASE) ;

n-SELECT ("თუ" Cj Sub)
    IF (1 Int) ;

# V თუ არა; is MWE now (no longer!)
#SELECT ("თუ" Cj)
#    IF (-1 V)
#       (1 ("<არა>"));

# old
#SELECT ("<არა>" Neg)
#    IF (-2 V)
#       (-1 ("თუ")) ;

n-SELECT ("ჩან·ი") + N IF (-1 ("<იუნ-იან>")) ;

SELECT ("*·ჩენ[ა]/ჩან") ; # IF (-1 ("როგორც")) ;

# only works with keep-non-mwe-readings = T
SELECT ("თუ") + Cj + Sub
    IF (-1 BOP)
       (1 ("<არა>")) ;

SELECT ("<არა>" Adv Neg)
    IF (-2 BOP)
       (-1 ("თუ")) ;

SELECT (Adv Neg)
    IF (1 V) ;

n-SELECT ("თუ" Cj Coord)
    IF (-1 Att + $$CASE)
       (1 Att + $$CASE) ;

# too general?
n-SELECT ("თუ" Cj Coord)
    IF (-1 $$CASE)
       (1 $$CASE) ;

SELECT ("ის" Pron)
    IF (1 Comma)
       (2 ("რომ")) ;

# very heuristic condition
SELECT ("თითქოს" Cj) IF (-1 Comma) ;

REMOVE ("თითქოს" Cj) ;

#n-SELECT Att + $$CASE - Qual - Guess
#    IF (1 Coord)
#       (2C Att + $$CASE - Qual - Poss) ;

n-SELECT Att + $$CASE - Qual
    IF (1 Coord)
       (2C Advb OR Adv)
       (3C Att + $$CASE - Qual) ;

n-SELECT Att + $$CASE + Qual
    IF (1 Coord)
       (2C Att + $$CASE + Qual) ;

# მე და ჩემს დას
n-SELECT Pron + Pers + $$CASE
    IF (1 Coord)
       (2C $$CASE) ;

n-SELECT Dat + L
    IF (1 Coord)
       (2C Dat) ;

n-SELECT Gen + L
    IF (1 Coord)
       (2C Gen) ;

n-SELECT Gen - L - Foc
    IF (1 Comma)
       (2C Gen + L) ;

n-SELECT Dat - L
    IF (1 Comma)
       (2C Dat + L) ;

n-SELECT $$CASE - Rel - Int
    IF (-1 COORD)
       (-2C $$CASE + L) ;

# წადი და თხა გადააბი!
n-SELECT Impv
    IF (1 ("და"))
       (1* Impv) ;

# ცხრამეტი წლისა იყო
n-REMOVE Temp + DGen + Nom IF (1 <AuxIntr>) ;

# corrdinate equal POS
n-SELECT N + $$CASE - Guess # + L
    IF (1 COORD)
       (2C N + $$CASE) ;

n-SELECT A + $$CASE + L - Guess
    IF (1 COORD)
       (2C A + $$CASE) ;

n-SELECT $$CASE + L + Guess
    IF (1 COORD)
       (2C A + $$CASE) ;


TEMPLATE NPDat = ? Dat - Att - PP - Cj LINK NOT 1 Pp ;
TEMPLATE NPDatHum = ? Dat + Hum - Att - PP - Cj LINK NOT 1 Pp ;

REMOVE Dat
    IF (0 Gen - <OldPl>)
       (1 N - Prop)
       (NOT 1 Dat)
       (NEGATE -1* V BARRIER CLB)
       (1C* T:NPDat BARRIER CLB OR V) ;

REMOVE NA + Dat - Att - Temp - PP
    IF (0 Gen - <OldPl> - L)
       (NOT -1 Dat + Att)
       (1 N)
       (NEGATE 0* V + DatArg3 BARRIER CLB) ;

# select MWEs elsewhere

SELECT (MWE) ;
SELECT (<MWE>) ;

# არა V რა
#…

# mn-SELECT ("<რა>" Adv)
#      IF (-1 V) (-2 ("<არა>")) ;

REMOVE Meas
    IF (NOT 1 NA) ;

SELECT Meas
    IF (1 Money) ;

REMOVE Meas
    IF (1 Anthr) ;

on-REMOVE Neg
       IF (NOT 1 V)
       	  (NOT 1 Neg) # Neg chain
       	  (NOT 0 Aux)
          (NOT 1 ("მხოლოდ"))
	  (NOT 0 Pron) ; # მეტი არაფერი

SELECT Adv + Neg IF (1C V OR ("მხოლოდ")) ;

m-REMOVE Neg - (Encl:ცა)
      IF (NOT 1 V)
      	 (NOT 1 ("რომ[ე]ლ·ი")) ;

REMOVE (V) if (1C Neg) ;

REMOVE ("არა" N Nom Sg) ;

REMOVE ("კაი" Prop) ;

REMOVE ("<კარი>" "კვრა" V) ;

# სხვა ვინმე/რამე
SELECT ("სხვ[ა]" Att) IF (1 Pron + SIndef) ;

# check this. what is Compl exactly?
SELECT Compl ; # IF (NOT -1 BOP);
REMOVE Compl IF (-1 BOP) (1 V);
REMOVE Compl IF (-1 BOP) (1 Neg) (2 V);

# First/Last name

LIST HydrQual = "მდინარ[ე]" "ტბ[ა]" "რუ" ;

LIST AreaQual = "ველ·ი" "კუნძულ·ი" "დაბლობ·ი" "მაღლობ·ი" "მთ[ა]"
                "არქიპელაგ·ი" "ვულკან·ი" "ნახევარკუნძულ·ი" "ოლქ·ი" "რეგიონ·ი" "რაიონ·ი" ;


LIST FirstNameQual = LastName "ბები[ა]" "ბაბუ[ა]" "ბრძენ·ი" "მეფ[ე]" "წყეულ·ი/წყ" "ბრძენ·ი"
                     "აღ·მდგენ[ე]ლ·ი/დგენ" Roman
                     ;

LIST SciQual = "ალკალოიდ·ი" "ფენომენ·ი" "ალკალოიდ·ი" "ვირუს·ი" "თევზ·ი" "იზოტოპ·ი" "ოჯახ·ი"
               "პრეპარატ·ი" "ფენომენ·ი" "ფრინველ·ი" "შხამ·ი" "ჰორმონ·ი" "ტერმინ·ი" ;

LIST TitleQual = "ბატონ·ი" "ქალბატონ·ი" "ამხანაგ·ი" "მინისტრ·ი"
         	 "ცოლ·ი" "ქმ[ა]რ·ი" "მეუღლ[ე]"
    	         "წმიდ[ა]" "<წმ.>" "ნეტარ·ი" "მამ[ა]" "მოწამ[ე]"
	         "მცველ·ი" "წევრ·ი"
	         "<.*ისტ>"r
	         "<მაესტრო>" ;

LIST OrgQual  = "კლუბ·ი" "კომპანი[ა]" "აგარაკ·ი" "აეროდრომ·ი" "ავიამზიდ·ი" "ავტომობილ·ი" "ალმანახ·ი"
                "აპარატ·ი" "არ[ა]ყ·ი" "აუზ·ი" "ბაზარ·ი" "ბალეტ·ი" "ბანაკ·ი" "ბანკ·ი" "ბატალიონ·ი" "ბაღ·ი"
                "ბენზინგასამართ·ი" "ბლოკ·ი" "ბორან·ი" "გაზეთ·ი" "გემ·ი" "გემთსაშენ·ი" "გუნდ·ი" "დევიზ·ი"
                "დივიზიონ·ი" "დუეტ·ი" "ეპოს·ი" "ერთეულ·ი" "ვესტერნ·ი" "თბომავ[ა]ლ·ი" "თეატრ·ი" "თვითმფრინავ·ი"
                "ინსტიტუტ·ი" "კაბრიოლეტ·ი" "კავშირ·ი" "კინოთეატრ·ი" "კინოფესტივალ·ი" "კინოფილმ·ი" "კლიპ·ი"
                "კლუბ·ი" "კოდექს·ი" "კოლეჯ·ი" "კომბინატ·ი" "კომიტეტ·ი" "კომპლექს·ი" "კონიაკ·ი" "კონკურს·ი"
                "კონსორციუმ·ი" "კონცერნ·ი" "კორპუს·ი" "კრეისერ·ი" "ლაინერ·ი" "ლეგიონ·ი" "მეიდან·ი"
                "მეტროსადგურ·ი" "მეჩეთ·ი" "მილსადენ·ი" "მოდელ·ი" "მონოპოლისტ·ი" "მულტსერიალ·ი" "ობიექტ·ი"
                "ოტელ·ი" "პანსიონატ·ი" "პოლიგონ·ი" "პორტ·ი" "პორტალ·ი" "პროექტ·ი" "პროტოტიპ·ი" "პუნქტ·ი"
                "ჟურნალ·ი" "რაზმ·ი" "რესტორან·ი" "რესტორ[ა]ნ·ი" "როკ-ჯგუფ·ი" "სადგურ·ი" "სამსახურ·ი" "სახლ·ი"
                "სახლ-მუზეუმ·ი" "სერიალ·ი" "სექტორ·ი" "სიგარეტ·ი" "სპექტაკლ·ი" "სპორტკლუბ·ი" "სპორტკომპლექს·ი"
                "სცენარ·ი" "ტაიფუნ·ი" "ტანკერ·ი" "ტაძ[ა]რ·ი" "ტელესერიალ·ი" "ტელეცენტრ·ი" "ტერმინალ·ი"
                "ტურნირ·ი" "უნივერმაღ·ი" "უნივერსიტეტ·ი" "ფესტივალ·ი" "ფილმ·ი" "ფილმოთეკ[ა]" "ფონდ·ი"
                "ფორუმ·ი" "ფრაქცი[ა]" "ფსევდონიმ·ი" "ქსელ·ი" "ჩემპიონატ·ი" "ცათამბჯენ·ი" "ცირკ·ი" "ცხენ·ი"
                "ძეგლ·ი" "წიგნ·ი" "ხომალდ·ი" "ჯგუფ·ი" "ჰიდროელექტროსადგურ·ი" "ჰიტ·ი" "ჰოლდინგ·ი" ;

SET nonAnthrQual = PlaceQual | HydrQual | SciQual ;

# რესტორანი „მერხეული”
SELECT OrgQual + Att + $$CASE
    IF (1 Quote)
       (2 N + $$CASE)
       (3 Quote) ;

n-REMOVE Anthr IF (-1C nonAnthrQual + Qual + Att) ;

n-ADD (Anthr FirstName <Cand>) TARGET Prop + Guess - FirstName
    IF (1C FirstNameQual) ;

n-ADD (<Cand>) TARGET Prop + Guess + Anthr + FirstName - <Cand>
    IF (1C FirstNameQual) ;

n-ADD (<Cand>) TARGET Prop + Erg + Guess + Anthr + FirstName - <Cand>
    IF (0* <S:Erg>) ;

n-ADD (Anthr FirstName <Cand>) TARGET Prop + $$CASE + Guess - FirstName
    IF (1C LastName + $$CASE) ;

n-ADD (<Cand>) TARGET Prop + $$CASE + Guess + Anthr + FirstName - <Cand>
    IF (1C LastName + $$CASE) ;

n-ADD (Anthr LastName <Cand>) TARGET Prop + $$CASE + Guess - bareStem - LastName
    IF (-1C FirstName)
       (-1 $$CASE) ;
       
n-ADD (Anthr LastName <Cand>) TARGET Prop + Erg + Guess - bareStem - LastName ;

LIST Relative = "ძ[ე]" "შვილ·ი" "ვაჟ·ი" "მამ[ა]" "დედ[ა]" ;

n-ADD (Anthr FirstName <Cand>) TARGET Prop + Gen + Guess - FirstName
    IF (1 Relative);

n-ADD (<Cand>) TARGET Prop + Gen + Anthr + FirstName + Guess - <Cand>
    IF (1 Relative);

LIST AnthrGenAttribute = "ნაშრომ·ი" "წიგნ·ი" "სტატი[ა]" "ნახატ·ი" "ლემ[ა]" ; # and more

n-ADD (Anthr <Cand>) TARGET Prop + Gen + Guess - Anthr
    IF (1 AnthrGenAttribute);

n-SELECT FirstName + $$CASE # + (<lemma>0>)
    IF (1C LastName + $$CASE);

n-SELECT FirstName + $$CASE
    IF (1 ("და") OR Comma)
       (NOT -1 FirstName)
       (2C FirstName + $$CASE) ;

n-SELECT LastName + $$CASE
    IF (-1 FirstName) # was -1C
       (-1C $$CASE);

n-SELECT Anthr
    IF (-1 Hum + Qual - ("დ[ა]"))
       (0 Guess) ;

n-REMOVE FirstName + Att
    IF (NOT 1 FirstNameQual) # ირინე ბებია; more?
       (NOT 1 Prop)
       (NEGATE 1 Roman LINK 1 FirstNameQual) # without ბებია, ბაბუა! fixme
       (NEGATE 1 ("და") LINK 1 LastName) ;

om-SELECT Anthr + Abs
    IF (1 LastName) ;

om-SELECT Anthr + Abs
    IF (1 ("ოქროპირ·ი")) ;

SELECT Guess + PP:თვის ;

SELECT Guess + Erg
    IF (0* <S:Erg> BARRIER CLB)
       (NOT 0* Erg BARRIER CLB) ;

#REMOVE Guess + Nom
#    IF (0* Nom - Temp BARRIER CLB) ;

LIST Coworker = "თანაავტორ·ი" "თანამშრომ[ე]ლ·ი" ;

n-ADD (Anthr LastName <Cand>) TARGET Prop + $$CASE + Guess - Anthr
    IF (1 ("და"))
       (2 Coworker + $$CASE + Pl) ;

# n-ADD (Top Area <Cand>) TARGET Prop + Guess + (".*ეთ·ი"r) - <Cand> ;

REMOVE Dem + Att IF (NOT 1 NOM) ;

REMOVE Dem IF (1 NegPart + Nom OR PastPart + Nom LINK 1 PREDVerb) ;

REMOVE ("პატარა" Adv) IF (NOT 1 V) ;

SET CommaDot = Comma | (".") ;
SET CommaDa = Comma | ("<და>") ;

SELECT ("კი") + Adv + Root IF (-1 BOS OR Dash) ;
SELECT ("კი" Disc) IF (1 ("არა")) ;
SELECT ("კი" Disc) IF (-1 N) ;
SELECT ("კი" Disc) IF (NOT 1 CommaDot) ;
SELECT ("კი" Disc) IF (1 CommaDot) ;

SELECT ("<ძალიან>" Adv) ;
SELECT ("<ისე>" Adv) ;

n-SELECT ("რომ[ე]ლ·ი") + Pron + Int
      IF (-1 ("თუ")) ;

o-SELECT ("რომ[ე]ლ·ი" Pron Rel) IF (NEGATE 1* IntMark BARRIER CLB) ;

# but: რომელ სკოლაშიც…!
# SELECT ("რომ[ე]ლ·ი" Pron Rel) ;
#SELECT ("რომ[ე]ლ·ი" Pron Rel Gen) IF (1 (Encl:ც)) ;

n-SELECT Pron + Rel + Gen IF (1 Rel:ც) ;

REMOVE ("რ[ა]" Att) IF (1 V OR Neg) ;

n-SELECT ("რამ") IF (-1 ("ასეთ·ი")) ;
#SELECT ("რ[ა]" Int) IF (1 V OR Neg) ;
SELECT ("რა" SIndef) IF (-1 V) ;

# not int
SELECT Pron + Poss + Rel + Att + $$CASE
    IF (1 $$CASE + Encl:ც) ;

SELECT Att + $$CASE
    IF (1 Pron + Par + $$CASE) ;

# რა თქმა უნდა
SELECT ("უნდა")
    IF (-2 ("რ[ა]"))
       (-1 ("<თქმა>")) ;

# ერთადერთი რამ
SELECT ("რამ") IF (-1 A + Nom + Att) ;

SELECT ("რ[ა]" Int)
    IF (1 ("<თქმა>"))
       (2 ("უნდა")) ;

SELECT ("რ[ა]" Int Nom)
    IF (-1 ("<მერე>"))
       (1 Comma OR IntMark) ;

SELECT Rel IF (0 SIndef) ;

n-SELECT Rel
      IF (1 Rel:ც) ;

# ისეთი მივლენები,… რომელთა შორის
n-SELECT Rel
      IF (1 Pp)
         (-1 Comma);# LINK -1* Pron + Indef BARRIER @CLB OR CLB) ;

n-SELECT Int - Rel:ც
      IF (NOT 1 Rel:ც) ;

n-SELECT (Pron Pers 3)
      IF (1 Comma)
      	 (2 Rel) ;

SELECT Int IF (-1 ("<თუ>")) ;
SELECT Int
    IF (-1 Coord)
       (-2 Int) ;

SELECT Voc
    IF (-1 Comma OR Dash OR BOS) (1 ExclPoint) ;

#SELECT Voc
#    IF (-1 BOS) (1 ExclPoint) ;


# remove Voc homonymous with Nom

# ასეთი მოუქნელი ხარ, ერიკა.
SELECT Voc + Hum OR Voc + Anthr
    IF (-1 Comma)
       (1 ExclPoint OR IntMark OR Period)
       (-1* S:Nom + S:2Sg BARRIER V) ;

REMOVE Voc
    IF (0 Nom)
       (NOT 0 Encl:IndSp3)
       (NOT 1 ExclPoint)
       (NOT 1 Voc)
       (NOT -1 Voc)
       (NEGATE -1 Comma LINK 2 IntMark OR Comma) # რაო, გოგო? Find way to remove Nom in this context! (See next)
       (NEGATE -1 Comma LINK -1 Voc) ;

SELECT Voc
    IF (-1 Comma OR Dash OR BOS) (1 IntMark) ;

# ბატონო თავმჯდომარევ
SELECT Voc + Att
    IF (1 Hum + Voc) ;

SELECT (Hum) IF (0C Voc) ;

n-SELECT ("თუ" Cj Coord)
    IF (-1 N + $$CASE - PP)
       (1 N + $$CASE) ;

# იმ შემთხვევაში თუ
n-SELECT ("თუ" Cj Sub)
    IF (-1 ("შე·მთხვევ\\[ა\\].*"r))
       (-2 Pron + Dem) ;

n-SELECT ("თუ" Cj Sub)
    IF (-1 Comma)
       (-2 ("შე·მთხვევ\\[ა\\].*"r))
       (-3 Pron + Dem) ;

n-REMOVE ("თუ" Cj Coord)
    IF (NEGATE -1 NAProp - Att - PP) ;

n-REMOVE ("თუ" Cj Coord)
    IF (-1 N + $$CASE - PP)
       (NEGATE 1 NA + $$CASE) ;

SELECT ("<იქნებოდა>" "ყოფნა") ;

SELECT ("<ხანია>" Temp)
       IF (-1 ("<კარგა>") OR ("<დიდი>")) ;

# ხან … ხანაც
SELECT ("ხან" Adv) IF (1* ("ხანაც")) ;
SELECT ("ხან" Foc) IF (-1* ("ხან")) ;

# არც კი
SELECT ("კი" Adv) IF (-1 ("არც")) ;

# რაც გინდ(ა)
SELECT ("რაც" Cj)
    IF (1 ("გინდ")) ;

SELECT ("რაც" Cj)
    IF (1 ("უფრო") OR A + Quant LINK 1* ("მით")) ;

SELECT ("მით") + Adv
    IF (-1* ("უფრო") OR A + Quant LINK -1 ("რაც")) ;

# should be Cj Compar, and Adv Deg
SELECT ("როგორც") + Cj + Compar IF (-1* ("ისევე")) (-1 Comma) ;

SELECT ("როგორც") + Cj + Compar IF (1* ("ისე") OR ("ისევე")) (-1 Comma) ;

# როგორც წესი
SELECT ("როგორც" Adv) IF (1 N) (2 Comma) ;

# როგორც … ისე
SELECT ("<როგორც>" Adv) - Rel
    IF (1* Comma LINK 1 ("ისე" Adv)) ;

SELECT ("<როგორც>" Cj Sub)
    IF (1 V) ;

SELECT ("<ერთი>" Nom) IF (-1 ("<ჯერ>")) ; # should be MWE?

# barrier?
SELECT ("<ვიდრე>" Compar) IF (-1* (Adv Deg)) ;
# SELECT ("<ვიდრე>" Compar) IF (-1* ("<უფრო>")) ;

SELECT ("<ვიდრე>" Compar) IF (NEGATE 1* V BARRIER CLB) ;

SELECT ("მეტ·ი") + Att + $$CASE
    IF (1 NA + $$CASE) ;

# move to later
# REMOVE (VPart);
# REMOVE (Old);
REMOVE (ConjPerf) ;
# REMOVE (Cond) ;
# REMOVE (Dialect) ;
# REMOVE (NonStand) ;

n-SELECT ("და" Cj)
      IF (NOT -1 (Poss Nom))
      	 (NOT -1 (Hum Gen) - L)
	 (NOT -1 (Anthr Gen) - L) ;

# nominal coordinations
SELECT ("და") + Cj
      IF (-1 Gen + OldPl)
	 (1 Gen + OldPl) ;

SELECT @NC
    IF (-1 Gen + OldPl)
       (1 Gen + OldPl) ;

SELECT @NC
    IF (-1 Gen + L)
        (1 Gen) ;

#ADD @NC ("და" Cj) - @NC
#      IF (-1 Gen + L)
#	 (1 Gen) ;

SELECT Comma + @NC
    IF (-3 ("რ[ა]") LINK 1 ("თქმ[ა]/თქმ") LINK 1 ("უნდა")) ;

SELECT @NC
    IF (-1 Dat + L)
       (1 Dat) ;

SELECT @NC
    IF (-1 Att + $$CASE)
       (1 Att + $$CASE) ;

# this is a bit dangerous
SELECT @NC
    IF (-1 Nom + Hum OR Pron + Pers + Nom)
       (1* Nom + Hum - Att BARRIER (*) - Att) ;

SELECT @NC
    IF (-1 Nom - Hum)
       (1* Nom - Hum - Att BARRIER (*) - Att) ;

SELECT @NC
    IF (-1 Pron + Pers + $$CASE)
       (1* Nom + Hum - Att + $$CASE OR Anthr + $$CASE BARRIER (*) - Att - Gen) ;

om-SELECT ("და" Cj) IF (NOT 1 (Poss Nom));

ADD @CLB ("ოღონდ") OR ("არამედ")
    IF (NEGATE 0 @CLB) ;

# add more!
SELECT @CLB
    IF (NEGATE 0 @CLB)
       (-1C Dat)
       (1C Nom) ;

SELECT @CLB IF (-1 BOS) ;

SELECT @CLB
    IF (-1*C V BARRIER CLB LINK NONE -1* Rel BARRIER CLB)
       (1*C V BARRIER CLB)
       (NEGATE -1 V LINK 1 ("თუ") LINK 1 Neg) # თუ არა
        ;

# might be comma before Cj
SELECT @CLB
    IF (-2*C V BARRIER CLB)
       (1*C V BARRIER CLB) ;

SELECT @CLB
    IF (1 ("რომ")) ;

# prelim.
SELECT @CLB + Comma ;

SELECT @CLB + ("მაგრამ") ;

SELECT ("თუ") + Cj + @NC IF (-1 V) (1 Neg) ;

#ADD @CLB Comma - @CLB - @NC
#    IF (-1 V) ;

#ADD @CLB Colon - @CLB - @NC
#    IF (-1 V) ;

SELECT ("რა" A) IF (NOT 1 V);

REMOVE ("დროს" Pp) ;
REMOVE ("მის·ი" Prop) ;
# REMOVE ("ერთ·ი") ;

REMOVE ("შენ" Poss Dat)
    IF (NOT 1 Dat);
REMOVE ("ჩვენ" Poss Dat)
    IF (NOT 1 Dat);
REMOVE ("თქვენ" Poss Dat)
    IF (NOT 1 Dat);

SET Dat2SgArg = DO:Dat + DO:2Sg | IO:Dat + IO:2Sg ;
SET Dat1PlArg = DO:Dat + DO:1Pl | IO:Dat + IO:1Pl ;
SET Dat2PlArg = DO:Dat + DO:2Pl | IO:Dat + IO:2Pl ;

REMOVE ("შენ" Pron Dat)
    IF (1 Dat)
       (NEGATE 0* Dat2SgArg) ;

REMOVE ("ჩვენ" Pron Dat)
    IF (1C Dat)
       (NEGATE 0* Dat1PlArg) ;

REMOVE ("თქვენ" Pron Dat)
    IF (1 Dat)
       (NEGATE 0* Dat2PlArg) ;

# შე სასიკვდილე
SELECT Voc
    IF (-1 ("შენ") + Pron + Voc) ;

# elaborate! შორის and not შორი
n-SELECT ("შორის" Pp);
o-REMOVE ("შორის" Pp) IF (NOT -1 Dat) (NOT 1 Dat);
REMOVE ("<შორის>" "შორის·ი") ;

n-SELECT ("კარგი" Interj)
    IF (1 ("რა" Interj))
       (2 Comma OR ExclPoint) ;

n-SELECT ("რა" Interj)
    IF (-1 ("კარგი" Interj))
       (1 Comma OR ExclPoint) ;

REMOVE Interj if (NEGATE 1* ExclPoint BARRIER CLB) ;

# შუა საუკუნეებში
n-SELECT ("შუ[ა]") IF (1 ("საუკუნ[ე]") + Pl) ;

# Postposition case agreement

LIST LQuote = "„" "»" ;
LIST RQuote = "”" "“" "«" ;

# quoted word
ADD $QW TARGET (*) IF (-1 LQuote) (1 RQuote) (NOT 0 $QW) ;

WITH LQuote
  IF (1 (*))
     (NEGATE p (*)) {
   SETPARENT (*) TO (jC1 (*)) ;
   MAP >PUNCT (*) ;
   REMCOHORT IGNORED WITHCHILD (*) (*) ;
} ;

WITH RQuote
  IF (-1 (*))
     (NEGATE p (*)) {
   SETPARENT (*) TO (jC1 (*)) ;
   MAP >PUNCT (*) ;
   REMCOHORT IGNORED WITHCHILD (*) (*) ;
} ;

o-SELECT ("<ზედა>" Pp)
      IF (-1 Gen OR Dat) ;

SELECT Gen IF (1 POSTP + <Gen>) (0C N) ;
SELECT Dat IF (1 POSTP + <Dat>) ;
SELECT DatGen IF (1 POSTP + <Dat/Gen>) ;
SELECT Inst IF (1 POSTP + <Inst>) ;
SELECT Advb IF (1 POSTP + <Advb>) ;

SELECT POSTP + <Gen> IF (-1C Gen) ;
SELECT POSTP + <Dat> IF (-1C Dat) ;
n-SELECT POSTP + <Gen> IF (-1 Pron + Dat) ; # but pronouns may be in Dat for Gen-selecting postp
SELECT POSTP + <Dat/Gen> IF (-1C DatGen) ;
SELECT POSTP + <Inst> IF (-1C Inst) ;
SELECT POSTP + <Advb> IF (-1C Advb) ;

om-SELECT ("მიმართ") + Pp IF (-1 Pron + Poss + Advb) ; # ჩუენდა მიმართო

n-SELECT Pron + Gen IF (1 POSTP + <Gen>) ; # იმის გამო
n-SELECT Pron + Dat IF (1 POSTP + <Gen>) ; # ჩემს გარდა

n-SELECT Pron + Rel IF (1 POSTP + Encl:ც) ;

# test
#SELECT POSTP + <Gen>
#    IF (-1 Gen)
#       (-1 Dat)
#       (NOT -1 V) ;

SELECT PREP + <Gen> IF (1 Gen) ;
o-SELECT PREP + <Dat> IF (1 Pron + Dat) ; # first try prep wanting Dat
o-SELECT PREP + <Gen> IF (1 Pron + Dat) ; # but pronouns may be in Dat for Gen-selecting preps
SELECT PREP + <Advb> IF (0C PREP) (1 Advb) ;
SELECT PREP + <Inst> IF (1 Inst) ;

# real postpositions
REMOVE  POSTP
    IF (NOT -1 CASE OR Digits)
       (NEGATE -1 Quote LINK -1 CASE OR Digits) ;

# prelim ზურგს უკან
SELECT ("უკან") + Pp
    IF (-1 Dat - Att) ;

# … 2012« მიხედვით
REMOVE  POSTP + <Gen>
    IF (NOT -1 Gen OR Pron + Pers + Dat OR Digits)
       (NEGATE -1 Quote LINK -1 Gen OR Digits) ;
REMOVE  POSTP + <Dat> IF (NOT -1 Dat) ;
REMOVE  POSTP + <Dat/Gen> IF (NOT -1 Dat) (NOT -1 Gen) ;
REMOVE  POSTP + <Inst> IF (NOT -1 Inst) ;
REMOVE  POSTP + <Advb> IF (NOT -1 Advb) ;

n-SELECT ("წინაშე" Pp) IF (-1 Gen) ;

n-SELECT ("<ერთად>" Pp) IF (-1 (PP:თან)) ;

SELECT ("უფრო" Adv) IF (1 A | Adv) ;

# o-SELECT ("ვიწრე" Cj) IF (1 (PP:მდე)) ;

# Modal უნდა : select უნდა before Opt/ConjPres/PluPerf
# ------------------------

# but not: გახდა შესაძლებელი
SET MODAL = Modal
    	    | ("შე·საძლო/ძლ") + Aux
    	    | ("შე·საძლებ[ე]ლ·ი/ძლ") + Aux
    	    | ("შე·უძლებ[ე]ლ·ი/ძლ") + Aux
    	    | ("შე·ძლებ[ა]/ძლ") + Aux
	    | ("შეუძლო") + Aux ;

SELECT Modal IF (1* OPT BARRIER CLB) ;
SELECT Modal IF (1 Neg) (2 OPT) ;
SELECT Modal IF (-1 OPT) ;

# SELECT OPT IF (-1* MODAL BARRIER CLB) ;
# SELECT OPT IF (-1* Modal BARRIER CLB) ;
# select OPT IF (-1 Modal) ;
SELECT VN IF (1 Modal) ;

SELECT OPT IF (-1* ("რომ") BARRIER CLB LINK -1 ("ნდომ[ა]/ნდ")) ;
SELECT OPT IF (-1* ("რომ") BARRIER CLB LINK -1 Comma LINK -1 ("ნდომ[ა]/ნდ")) ;

LIST SUBJ = S:1 S:1Pl S:1Sg S:2 S:2Pl S:2Sg S:3 S:3Pl S:3Sg ;

SET DESID = ("შე·ძლებ[ა]/ძლ") | ("სურვებ[ა]/სურ") | ("ნდომ[ა]/ნდ") ;

# შეგიძლიათ დაჭრათ
SELECT DESID + $$SUBJ
    IF (1* OPT + $$SUBJ BARRIER CLB) ;

SELECT OPT + $$SUBJ
    IF (-1* DESID + $$SUBJ BARRIER CLB) ;

# უნდა, რომ
SELECT ("<უნდა>" V)
    IF (1 Comma)
       (2 ("რომ")) ;

#  შეიძლება წასვლა
REMOVE ("შეიძლება") IF (1 VN) ;

# unpersonal უნდა/შეიძლება
SELECT Modal
    IF (NEGATE 0* Dat BARRIER CLB)
       (NEGATE 1 Comma LINK 1 ("რომ"))
       (1* V BARRIER @CLB) ;

# but: ამის მიზეზი etc.
# only before PPs?
#n-REMOVE (Pron Pers Gen)
#       IF (NOT 1 POSTP) ;

# more with OPT?
SELECT OPT
       IF (-1* ("<რათა>") BARRIER Comma) ;

SELECT ("გონებ[ა]/გონ") + DO:3
    IF (1 Comma)
       (2 ("თითქოს")) ;

SELECT ("სმენ[ა]/სმ")
    IF (1 Comma)
       (2 ("რომ")) ;

# N/A disambiguation
# ------------------------

SELECT A + $$CASE + Sg
    IF (1 COORD)
       (NOT 0 V)
       (2C A + $$CASE + Sg) ;

SELECT A + $$CASE + Att
    IF (0C A)
       (1 Comma)
       (2C Gen + Att)
       (3C Gen)
       (4 $$CASE + Att) ;

SELECT A + $$CASE + Att
    IF (0C A)
       (1 COORD)
       (2C $$CASE + Att) ;

SELECT A + $$CASE + Att
    IF (0C A)
       (1 Comma)
       (2 ("არამედ"))
       (3C $$CASE + Att) ;

REMOVE LastName - Erg
    IF (1 COORD)
       (-1 FirstName)
       (2C FirstName + Erg)
       (3C LastName + Erg) ;

# add more conditions for removal of Att reading
n-REMOVE A + Att
    IF (1 EOS) ;

n-REMOVE A + Att
    IF (0 Nom + Sg)
       (1 Comma)
       (2 Adv) ;

n-REMOVE Part + Att
    IF (1C Pron + Poss + Refl) ;

n-REMOVE A + Nom + Sg - Part
    IF (0 N + Nom + Sg)
       (NOT 0 Aux)
       (NOT 1 AUX)
       (NOT 1 <AuxIntr>)
       (NEGATE 1 Neg LINK 1 <AuxIntr>)
       (NOT 0 NonStand)
       (NOT 0 Old)
       (NOT 1 N + Nom)
       (NOT 1 PREDADJVerb)
       (NEGATE 1 COORD LINK 1 A + Nom) ;
      # (NEGATE 1 Comma LINK 1 A + Nom) ; # COORD contains Comma

m-REMOVE N + $$CASE + $$NUMBER 
       IF (0 A + $$CASE + $$NUMBER)
       	  (1 N + $$CASE + $$NUMBER) ;

mn-REMOVE A + PP IF (0 N + PP) ;

# N/VN disambiguation: always select VN
# ------------------------

# valid only if both have same lemma, wich is difficult to check
# REMOVE (N) IF (0 (VN));
# Adjective/Noun disambiguation
# ------------------------

# SELECT N IF (0 A) (NOT 1 NOM);

# prefer N in Pl
SELECT N + Pl - VN IF (0C N OR VN) (0C Pl) ;

# choose N/Prop between N/Prop Full and A Full, not Advb
#remove A - Att if (NOT 0 Att | (Advb));

REMOVE Prop + $$CASE
    IF (-1 INDEF + $$CASE) ;

# თევდორაანთ მელანო
SELECT FirstName
    IF (-1 (Coll) + Gen) ;

# proper nouns normally have no genitive attribute, but it might be part of a Gen chain
# refine!
REMOVE Prop - Gen
    IF (-1C Gen) ;

LIST localPP = PP:ში PP:თან ;

# more local PPs?
REMOVE N + Anthr OR Hum + localPP
    IF (0 Prop + Top + localPP) ;

REMOVE N + Anthr OR Hum + localPP
    IF (0 Prop + Guess + localPP) ;


SELECT ("ხელა" A) IF (-1 Gen) ;

# Att disambiguation
# ------------------------

TEMPLATE NPGen = (? NA + Gen) OR (? NA + Gen + Att LINK 1 T:NPGen) ;

# missing: intervening PP or ADV
REMOVE Att
    IF (NOT 1 NACDemProp)
       (NOT 1 T:NPGen)
       (NOT 0 Anthr LINK 1 (Ord Roman))
       (NOT 1 ("და" Cj) | (",")) ;

REMOVE Att IF (1C V) ;

REMOVE Att IF (1 Ellipsis OR Semicolon OR Colon) ;

REMOVE Att + $$CASE IF (1 Punct LINK NOT 1 Att + $$CASE) ;

SELECT Att + Erg
    IF (0C Att)
       (1C Erg) ;

#SELECT Att + Gen
#    IF (1C Gen)
#       (0C A) ;

SELECT Att + Gen - <OldPl>
    IF (NOT 1 ("და" Cj))
       (1C Advb)
       (2C Gen) ;

# რისთვის იყო ეს საჭირო?
SELECT Pron + Dem + Nom - Att
    IF (1 ("საჭირო") + Nom + Sg) ;

# can go wrong if 0 is Adv?
SELECT Att + Nom
    IF (1C Nom - Pron)
       (NOT 0 Gen)
       (NOT 0 Cj)
       (NOT 1 Aux)
       (NOT 2 AUX) ;

# ვახტანგ IV
SELECT Att + $$CASE
    IF (0 Anthr)
       (1 Ord + Roman + $$CASE) ;

# REMOVE (ALLQ) + Att + $$CASE
#    IF (NOT 1 NADemProp + $$CASE) ;

# მთებ შუა; are there other possibilities?
remove (Dat Pl) + Att IF (NOT 1 ("<შუა>"));

# Attributive Genitive

REMOVE V
    IF (0 VN)
       (-1C Gen - L) ;

# Adv vs. N + Pp etc.
n-REMOVE Adv
    IF (0 N)
       (-1 Gen - L) ;

REMOVE Att + $$CASE
    IF (NEGATE 1* NACProp + $$CASE - Att OR SIndef + $$CASE OR Pron + Neg + $$CASE
        OR Pron + Dem + $$CASE - Att
        OR Pron + Refl + $$CASE - Att
        BARRIER @CLB) ;

# Case congruence rules
# ------------------------

SELECT NA + $$CASE OR Num + $$CASE
    IF (-1C Att + $$CASE) ; 

om-SELECT (A Advb) IF (-1 (N Advb)) ;

om-SELECT ("თჳს·ი" Poss) + $$CASE
       IF (-1 N + $$CASE) ;

om-SELECT (Pron Poss) + $$CASE - Abs
       IF (1 N + $$CASE) ;

om-SELECT (Pron Poss Advb Trunc)
       IF (1 (N Advb)) ;

REMOVE (Encl:IndSp3) IF (0 Voc) (1 Voc) ;

SELECT Pron + Dem + $$CASE - Nom
    IF (1C $$CASE) ;

REMOVE Pron + Dem + $$CASE
    IF (1 PP)
       (NOT 1 $$CASE) ;

# change to Adv NMod
SELECT Pron + Dem + $$CASE
    IF (1 ("ვითომდა"))
       (2C $$CASE) ;

n-SELECT Pron + Pers + Nom + (3)
	IF (1* NomHead LINK 1 ("ყოფნ[ა]/არ")) ;

n-REMOVE Pron + Pers + Nom + (3)
    IF #(0 Pron + Att + Nom OR Pron + Dem + Nom)
       (1C Nom)
       (NEGATE 0* PREDVerb BARRIER CLB) ;

#n-SELECT Pron + Att + Nom OR Pron + Dem + Nom OR Pron + Pers
#    IF (1C Nom) ;

# ისეთმა ხალხმა
# ამის მეტს
# aber: ეს კაცი!!
#n-SELECT Pron + Att + $$CASE OR Pron + Dem + $$CASE OR Pron + Pers
#    IF (1C $$CASE) ;

# Prop, or better Anthr?
SELECT QUAL + $$CASE - PlaceQual - HydrQual
    IF (1 Anthr + $$CASE)
       (NOT 0 ("<და>"))
       (1C N) ;

REMOVE ("ქართველ·ი" Prop) ;

SELECT Anthr + $$CASE
    IF (-1 QUAL + $$CASE - nonAnthrQual)
       (NOT -1 ("და")) ;

REMOVE QUAL
    IF (1 Comma) ;

SELECT Qual + $$CASE
    IF (1 Quote)
       (2 Prop + $$CASE)
       (3 Quote) ;

om-SELECT DDat IF (-1C Dat) ;

# correct? სახარებასა სასუფეველისა ღმრთისასა
om-SELECT DDat IF (-1C Gen) (-2C Dat) ;

om-REMOVE (DDVoc) ;

### guessing rules for qualified unrecognized words (ბატონი XYZ)

SET LastNameRus = (".*სკი"r) | (".*იჩ·ი"r) | (".*ოვ·ი"r) | (".*ევ·ი"r) ;
SET LastNameGeo = (".*(ა|ი)ძ\[ე\]"r) | (".*შვილ·ი"r) ;

SET NounSFX = (".*ება"r) | (".*ობა"r) | (".*იზმ·ი"r) | (".*აცია"r)  | (".*ისტ·ი"r) ;

#n-ADD (Anthr LastName <Cand>) TARGET Prop + Guess - LastName
#    IF (-1C FirstName) ;

n-REMOVE FirstName + Guess + $$CASE
      IF (-1 FirstName + $$CASE)
         (0 LastName) ;

# ქალაქ კოლომიაში
n-ADD (Top Place <Cand>) TARGET  Prop + NomStem + Guess - LastName - FirstName - Place
   IF (-1 PlaceQual) ;


n-ADD (Top Place <Cand>) TARGET  Prop + Guess - LastName - FirstName - Place
   IF (-2 PlaceQual)
      (-1 ("ყოფნ[ა]/ყ[ავ]")) ;

LIST PlaceAdj = "დასავლეთ·ი" "სამხრეთ·ი" "აღმოსავლეთ·ი" "ჩრდილო" ;

n-ADD (Top Place <Cand>) TARGET  Prop + Gen + Guess - LastName - Place - <Cand>
   IF (-1 PlaceAdj + Att) ;

# პისანკას მუზეუმი ??
n-ADD (Top Place <Cand>) TARGET Prop + Gen + Guess - LastName - Place
   IF (1 PlaceHead) ;

n-REMOVE Anthr + Guess IF (1 PlaceHead) ;

LIST TopHead = "მასივ·ი" "მთ[ა]" "ხეობ[ა]" "უდაბნო" "უღელტეხ·ი" ;

n-ADD (Top Area <Cand>) TARGET Prop + Gen + Guess + NomStem - LastName - Area
   IF (1 TopHead) ;

#n-ADD (Top Place <Cand>) TARGET Prop + PP:ში + Guess - LastName - Place ;

# ქალაქ კოლომიაში
# but: მდინარე სტოქასტური პროცესია
n-ADD (Top Hydr <Cand>) TARGET  Prop + Guess - LastName - FirstName - Hydr
   IF (-1 HydrQual) ;

# ქართველები etc is not Prop!
# LIST PropGen = "კულტურ[ა]" "დინასტი[ა]" ;

#n-ADD (<Cand>) TARGET  Prop + Gen + Guess - <Cand>
#   IF (1 PropGen) ;


#n-SUBSTITUTE (LastName) (GLastName) TARGET Guess
#    IF (-1 FirstName) ;

n-SELECT ("ბ-ნ") + Hum + Qual + Abbrev
    IF (1 Anthr) ;

n-SELECT LastName
    IF (-1C FirstName) ;

n-SELECT LastName
    IF (-1 Prop + Anthr + Abbrev) ;

n-SELECT FirstName + Guess
    IF (1C LastName) ;

n-SELECT FirstName + Guess
    IF (1C LastNameRus OR LastNameGeo) ;

n-SELECT FirstName OR LastName
    IF (-1 TitleQual) ;

n-SELECT FirstName OR LastName
    IF (-1 TitleQual) ;

n-SELECT FirstName
    IF (-1 TitleQual)
       (1 LastName) ;

n-SELECT Org
    IF (-1 OrgQual) ;

SELECT N + Guess
    IF (0 NounSFX)
       (NOT 0 V) ;

SELECT Anthr + Abbrev
    IF (1 LastName) ;

# -ის looks like gen
SELECT QUAL + Gen - ("დ[ა]")
    IF (1 Guess + ("<.*ის>"r)) ;
# if not, guess Nom or Dat

SELECT QUAL + Nom - ("დ[ა]")
    IF (1 Guess) ;

SELECT QUAL + Dat - ("დ[ა]") - ("საკუთ[ა]რ·ი")
    IF (1 Guess) ;

#SELECT QUAL
#    IF (1 Guess) ;

n-SELECT Place
    IF (-1 PlaceQual) ;

n-SELECT Hydr
    IF (-1 HydrQual) ;

# n-SELECT Place + Guess + PP:ში ;

# guessed words

n-SELECT Prop IF (-1 Quote) (1 Quote) ;
#n-SELECT Prop IF (-1 Quote) (2 Quote) ;
#n-SELECT Prop IF (-2 Quote) (1 Quote) ;

n-SELECT Org IF (-1 Quote) (-2 ("კომპანი[ა]")) ;


# n-SELECT NewPl + Guess ; #- (<lemma=MAX>) ; # prefer treating -ებ as pl suffix, not part of stem

# remove Att readings if there is no congruent case in next pos.
# BUT: ხელით დაწერილი სამად სამი სიტყვა

#REMOVE $$CASE + Att
#    IF (NOT 1 $$CASE) ;

SELECT A + Abs
    IF (1 ("ქმნ[ა]/ქ[ე]ნ") + Pass) ; 


# remove reduced case if there is no following possible head
REMOVE $$CASE + Att - Erg
    IF (NOT 1 $$CASE)
       (NOT 1 Comma)
       (NOT 1 Foreign)
       (NEGATE 1 Coord | Adv LINK 1 $$CASE)
       (NEGATE 1 Coord LINK 1 Advb OR Adv LINK 1 $$CASE)
       # (NEGATE 1 T:NPGen LINK 1 $$CASE) ; # doesn't work
       (NEGATE 1 NA + Gen LINK 1 $$CASE)
       (NEGATE 1 Num + Advb LINK 1 $$CASE)
       (NEGATE 1 NA + Gen LINK 1 NA + Gen LINK 1 $$CASE)
       (NEGATE 1 NA + Gen LINK 1 NA + Gen LINK 1 NA + Gen LINK 1 $$CASE)
       (NEGATE 1 NA + Gen LINK 1 NA + Gen LINK 1 NA + Gen LINK 1 NA + Gen LINK 1 $$CASE) ;

# special for Erg
REMOVE Erg + Att
    IF (NEGATE 1* NAProp + Erg BARRIER ("და") OR V OR CLB) ;

REMOVE Erg - Att
    IF (1* NAProp + Erg - Att BARRIER ("და") OR V OR CLB) ;


# Because of prev. rule we know that the reduced reading has a head.
# Should add condition on temporal expressions?
n-REMOVE Nom - Att
    IF (0 Att - Qual)
       (NOT 1 Cj)
       (1C Nom - Att - Pron - Aux - Part) ;

# but: სილიბისტრო და მისი და
REMOVE $$CASE + Nom - Att
    IF (0 Att)
       (NEGATE 0* NomArg3 BARRIER CLB)
       (NOT 1 Cj)
       (1 $$CASE - Pron) ;

REMOVE Dat - Att - PP - Guess - 1 - 2 
    IF (0 Att)
       (NEGATE 0* DatArg3 BARRIER CLB) ;

REMOVE Dat - Att - 1 - 2
    IF (0 V)
       (NEGATE 0* DatArg3 BARRIER CLB) ;

# ამოვყავი თავი
SELECT ("თავ·ი") + N
    IF (0* ("ამო·ყოფ[ა]/ყ[ავ]") OR ("ტკივებ[ა]/ტკივ") BARRIER V OR @CLB) ;

# add case/person constraints
n-SELECT Pron + Refl + $$CASE
    IF (-1 Pron + Poss + $$CASE)
       (0*C V BARRIER CLB) ;

n-SELECT N + $$CASE
    IF (-1C Pron + Indef + $$CASE)
       (NOT 0 Gen)
       (NOT 0 ("<და>")) ;

n-SELECT N + $$CASE
    IF (-1 Pron + Poss + $$CASE)
       (NOT 0 A)
       (NOT 0 ("<და>"))
       (NOT 0 ("თავ·ი")) ;

n-SELECT ("<და>") + N
    IF (1 ("<და>")) ;

# შენი და ჩემი
SELECT Coord
    IF (-1 Pron + Poss + $$CASE)
       (1 Pron + Poss + $$CASE) ;

SELECT Voc
    IF (-1 ("და"))
       (-2C Voc) ;

REMOVE Voc
    IF (-1 APart + Nom) ;

# chained Adjs
#SELECT $$CASE + Att
#    IF (1 (Comma))
#       (2C $$CASE + Att) ;

# წერილ არს
o-SELECT PastPart + Abs
     IF (1 AUX) ;

SELECT PastPart + Nom + Sg
    IF (-1 Encl:Aux OR <AuxIntr>) ;

# არც … არც

REMOVE V
    IF (-1 Neg + Encl:ც)
       (-2 Comma)
       (-3* Neg + Encl:ც) ;

# Verb if no other verb in clause

# TEMPLATE NPDat = (? Dat - Att - PP LINK NOT 1 Pp ) ;

# TEMPLATE AP = (A OR (Adv LINK 1 A) OR (PP LINK 1 Part)) ;

# TEMPLATE NP = (N OR (T:AP LINK 1 N) OR …

SELECT V
    IF (NEGATE 0* V OR Aux); # BARRIER CLBsub) ;

SELECT N
    IF (1C V)
       (NOT 1 PREDADJVerb)
       (NOT 1 AUX)
       (NOT 1 ("ყოფნ[ა]/არ"))
       (NOT 0 Pron)
       (NOT 0 Advb)
       (NOT 0 Adv)
       (NOT 0 Part)
       (NOT 0 Unrecognized) ;

SELECT A + Nom
    IF (1 PREDADJVerb) ;

SELECT A
    IF (-1 ("უფრო")) ;

REMOVE V
    IF (0C* V BARRIER CLBsub OR Bracket OR Paren)
       (NEGATE 0* Aux BARRIER CLBsub) ;

# needs refinement!
REMOVE V IF (1C V) ;

# V / VN disambiguation
REMOVE V
    IF (0 VN)
       (0* V BARRIER CLB OR Coord OR Compl OR Comma) ;

# ??
# SELECT (A Advb) ;

# Case disambiguation
# ------------------------

# დედაჲ მისი მარიამ
o-SELECT Prop + Anthr + Abs
    IF (-1 Pron + Poss)
       (-2 N + Hum + Qual) ; # Qual needed?

# remove Erg if there is no verb licensing it

# elaborate!
REMOVE Erg
    IF (NOT 1C Erg)
       (NOT -1C Erg)
       (NEGATE 0* V + S:Erg BARRIER CLB) ;

n-SELECT PERSON + Erg - Att - Guess
    IF (0*C V + S:Erg BARRIER CLB)
       (NOT 1* Erg BARRIER CLB)
       (NOT 0 OldPl) ;

n-REMOVE PERSON + Erg - Att
    IF (1 Dem + Erg) ;

# Have to split this in two because Erg on person names is unmarked
# Default is SOV or SVO
# e.g. აბრაჰამ.Erg შვა ისაკ.Nom
om-SELECT PERSON + Erg
    IF (1*C V + S:Erg + S:3Sg BARRIER CLB)
       (NOT 0 OldPl) ;

om-SELECT PERSON + Erg
    IF (0*C V + S:Erg + S:3Sg BARRIER CLB)
       (NEGATE -1* Erg BARRIER CLB)
       (NOT 0 OldPl) ;

om-SELECT PERSON + Nom
    IF (0*C V - <S-DO-IO> + DO:Nom + DO:3Sg BARRIER CLB)
       (0C N)
       (NOT 0 OldPl) ;

# გაქცეულთ გასძახა
REMOVE Erg + OldPl
    IF (0 Dat + OldPl)
       (1* (<S:Erg> S:3Sg IO:3) BARRIER CLB)
       (NEGATE 1* T:NPDat BARRIER CLB) ;

REMOVE Dat + OldPl
    IF (0 Gen + OldPl)
       (1 Coord)
       (2C Gen + OldPl) ;

LIST PseudoPostpGen = "მეშვეობ[ა]" "წყალობ[ა]" "საშუალებ[ა]" "თანხლებ[ა]" ; # etc.

SELECT Gen IF (1 PseudoPostpGen + Inst) ;
SELECT Gen IF (1 VN + Inst) ;

# no two datives if verb doesn't license them
# but allow two dative attributes
REMOVE NAProp + Dat - Att
    IF (0 Gen)
       (1C Dat - PP)
       (NEGATE 0* DO:Dat + IO:Dat)
       (NEGATE 1* <Dat>)
       (NEGATE 1* <Dat/Gen>) ;

# Problem: სახელმძღვანელო სახელწოდებით

SELECT (Prop Abs) IF (-1 ("<სახელით>")) ;

om-SELECT Prop + $$CASE IF (NOT 0 N) (-1 A + $$CASE) ;

om-SELECT N + $$CASE IF (-1C Dem + $$CASE) ;

om-SELECT (Pron Poss) + $$CASE IF (-1 NOM + $$CASE) ;

# select reduced congruent case if there is no N Full reading ...
#SELECT ADJ + $$CASE + Att 
#    IF (NOT 0 N - Att)
#       (1C NAProp + $$CASE - (Poss))
#       (NEGATE 1 T:NPGen LINK 1 $$CASE) ;

# not sure how to keep this:
# ... or none in Nom that may be verb arg
#SELECT ADJ + $$CASE + Att 
#    IF (1C NAProp + $$CASE - (Poss))
#       (NEGATE 0 (N Nom Full) LINK 0* V + NomArg3 BARRIER CLB) ;

# იქნა ჩადენილი დანაშაული
SELECT PastPart + Nom + Sg
    IF (-1 ("ქმნ[ა]/ქ[ე]ნ") + V) ;

# exclusion of Inst Att on -ის (Ext)
n-SELECT ADJ + $$CASE + Att OR Pron + Refl + $$CASE + Att
      IF (1C NAPropPart + $$CASE - Poss - Gen OR Pron + Refl + $$CASE - Att)
      	 (NOT 1 Part + Aux)
         (NOT 0 Ext)
	 (NOT 0 Adv OR Advb OR Gen OR N) ;

n-REMOVE (".*ის·ი"r) + Dat + Guess ; # treat -ის as Gen

n-SELECT ("თავის·ი") + Refl + $$CASE
    IF (1C NA + $$CASE OR Num + $$CASE) ;

n-SELECT ("თავ·ი") + N IF (-1 N + Gen) ;

n-SELECT ("თავ·ი") + Refl ;

#n-REMOVE Att
#   IF (1 ("ყველა")) ;

# could go wrong when Gen modifies a Nom. Elaborate!
n-SELECT ADJ + Gen + Att - <OldPl> - Guess - ("ხელ·ი")
      IF (1C NAPropPart + Gen - Poss)
         (NOT 0 PP) ;

# rationale: allow two arguments with equal case if the verb licenses them, e.g. S:Nom + NomPrl
# SELECT ??

SELECT ADJ + Erg + Att
    IF (1C NProp + Erg) ;

REMOVE Anthr + Att
    IF (1C Top) ;

#SELECT ADJ + $$CASE + Att
#    IF (1C NProp + $$CASE) ;
# This should be added when we have prls in the morphology
#      (NEGATE 0 (N Nom Full) LINK 0* V + NomArg3 + NomPrl BARRIER CLB) ;

#SELECT (Ord) + $$CASE + Att IF (1C N + $$CASE);
#SELECT (Q) + $$CASE + Att IF (1C N + $$CASE);

# TODO: treat in the same way as Att/Full
SELECT Dem + $$CASE - Nom
    IF (1 NA + $$CASE) (1C NA) ;

#SELECT Dem + Nom
#    IF (1C NA + Nom - Aux) ;

SELECT Pers + Nom
    IF (1C NA + Aux) ;

SELECT Dem + $$CASE IF (1 Prop + $$CASE) (1C Prop) ;

#SELECT Dem + $$CASE
#    IF (1C A + $$CASE) ; # ?? ის პირველი

# what is Q?
# SELECT Dem + $$CASE IF (1C Q + $$CASE) ;

om-SELECT Dem + $$CASE IF (-1 NAPart + $$CASE) (-1C NAPart) ;

# წმიდანი იგი წიგნნი
om-SELECT A + $$CASE + $$NUMBER
       IF (1 Dem + $$CASE)
       	  (2 N + $$CASE + $$NUMBER) ;

om-SELECT (Pron Refl) + $$CASE
       IF (1 Dem + $$CASE)
       	  (2 N + $$CASE) ;

om-REMOVE QUAL IF (NOT -1 (Anthr)) ;

om-SELECT QUAL + $$CASE
       IF (-1 Anthr + $$CASE) ;

om-REMOVE QUAL + $$CASE
       IF (-1 Anthr)
       	  (NOT -1 $$CASE) ;

om-SELECT $$CASE
       IF (0 Anthr + $$CASE)
       	  (1 QUAL + $$CASE) ;

o-SELECT N + $$CASE
       IF (-1C Num + Card + $$CASE) ;

# but: ფრაქცია მოქალაქეთა კავშირმა
n-REMOVE QUAL + $$CASE
    IF (NOT 1 PERSON + $$CASE)
       (NEGATE 1 (Comma) LINK 1 PERSON + $$CASE) ;

# too simple
n-REMOVE Dem + $$CASE
    IF (NOT 1 $$CASE)
       (NEGATE 1 Gen LINK 1 $$CASE) ;

SET OLDPL = OldPl | (<OldPl>) ;

# refine!
REMOVE <OldPl> + $$CASE
    IF (NOT 1 OLDPL + $$CASE)
       (NOT 1 A + $$CASE LINK 1 OLDPL + $$CASE)
       (NEGATE 1 COORD LINK 1 OLDPL + $$CASE) ;

SELECT <OldPl> + $$CASE
    IF (1C OLDPL + $$CASE) ;

SELECT <OldPl> + $$CASE
    IF (1 COORD LINK 1C OLDPL + $$CASE) ;

n-REMOVE A + Att + <OldPl>
      IF (NEGATE 1* OldPl) ;

n-REMOVE A + Att + Advb
      IF (NEGATE 1* Advb) ;
      
SELECT N + $$CASE
    IF (-1 FirstName)
       (-2 Att + $$CASE) ;

# მთავარმა კონრად I მაზოვიელმა
SELECT N + $$CASE
    IF (-1 Card + Roman)
       (-2 FirstName)
       (-3 Att + $$CASE) ;

# Double case
# ------------------------

m-REMOVE (OldPl DNom DSg) ;
m-REMOVE (Gen DNom DSg) ;

REMOVE (DVoc) IF (0 L) (1 Coord) ;

REMOVE DNom
    IF (0 (Gen L) - Att)
       (1 COORD)
       (2 Gen) ;

REMOVE DNom
    IF (0 (Gen L) - Att)
       (1 COORD)
       (2 Quote)
       (3 Gen) ;

REMOVE DNom
    IF (0 (Gen L) - Att)
       (1 COORD)
       (2 (Card Digits))
       (3 Gen) ;

REMOVE DNom
    IF (-1 ("გარდა") + Pp) ;

REMOVE DNom
    IF (-1 Gen)
       (-2 ("გარდა") + Pp) ;

# 24 წლისა
SELECT ("წ[ე]ლ·ი") + DNom
    IF (-1 Num + Card)
       (NOT 1 COORD) ;

om-SELECT (Nom OldPl) IF (1 (DNom DOldPl)) ; # etc.

# Coordination
# ------------------------

# Adjective coordination

# SELECT ADJ + $$CASE + Att IF (NOT 0 (V)) (1 ("და" Cj)) (2C NAProp + $$CASE);

SELECT ADJ + $$CASE + Att IF (NOT 0 (V)) (1 ("და" Cj)) (2 (Adv)) (3C NAProp + $$CASE);

# SELECT ADJ + $$CASE + Att IF (NOT 0 (V)) (1 (",")) (2C NA + $$CASE);

SELECT ADJ + $$CASE + Att
    IF (0C $$CASE)
       (NOT 0 N + $$CASE OR Num + $$CASE)
       (1 COORD)
       (2C ADJ + Att + $$CASE);

# SELECT ADJ + $$CASE + Att IF (NOT 0 (V)) (1 (",")) (2 (Adv)) (3C NA + $$CASE);

# Verb coordination: used for Aor/Opt disambiguation
# todo: add material in between
SELECT $$AOR IF (0C V) (1* ("და" Cj) BARRIER CLB LINK 1C* $$AOR BARRIER CLB) ;
SELECT $$AOR IF (0C V) (-1* ("და" Cj) BARRIER CLB LINK -1C* $$AOR BARRIER CLB) ;
       
# ღმერთო ჩვენო
SELECT (Poss Voc) IF (-1C Voc) ;


# Adjective/PART disambiguation
# ------------------------

SELECT ("მასწავლებ[ე]ლ·ი" N) ; # not Part

# SELECT Part IF (-1C Gen) ;

n-REMOVE Part IF (0C Pl) ;

SELECT ("ამდენ·ი") + A - Part ;

# participles that are probably nouns, TODO: add more!
LIST NPart = "მდინარ[ე]" "მასწავლებ[ე]ლ·ი" "ჩამონათვალ·ი" ;

SELECT Part + $$CASE + Att
    IF (1C NA + $$CASE - Part)
       (NOT 0 NPart) ;

SELECT Part
    IF (0 Advb + Sg) # purposive
       (NOT 0 Adv)
       (NOT 0 Encl:IndSp3) ;

SELECT Part
    IF (0 FutPart OR NegPart)
       (0C A)
       (NOT 0 Pl)
       (NOT 0 Encl:IndSp3) ; # not საზოგადო

SELECT Part
    IF (0 Part + Pv - Pl)
       (NOT 0 ("ამდენ·ი"))
       (0C Part OR NA)
       (NOT 0 NPart) ;

# REMOVE Part IF (0 (A));

# მოკლულ იქნა
n-SELECT (PastPart Abs)
      IF (1 ("<ქმნ[ა]/ქნ>" Pass)) ;

# Agreement, Argument case selection
# ------------------------

m-REMOVE (DO:1Pl) IF (0 DO:1Sg) ; # მ- can be 1Pl in OG
m-REMOVE (IO:1Pl) IF (0 IO:1Sg) ; # მ- can be 1Pl in OG

om-SELECT ("<იყო>" Pass) IF (NOT 0* Erg BARRIER CLB) ;

# Pron Pers

SELECT (Pron Pers Erg 1 Sg) if (0C* S:Erg + S:1Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Nom 1 Sg) if (0C* S:Nom + S:1Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 1 Sg) if (0C* S:Dat + S:1Sg BARRIER CLB OR V) ;

SELECT (Pron Pers Erg 2 Sg) IF (0C* S:Erg + S:2Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Nom 2 Sg) IF (0C* S:Nom + S:2Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 2 Sg) IF (0C* S:Dat + S:2Sg BARRIER CLB OR V) ;

SELECT (Pron Pers Erg 1 Pl) IF (0C* S:Erg + S:1Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Nom 1 Pl) IF (0C* S:Nom + S:1Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 1 Pl) IF (0C* S:Dat + S:1Pl BARRIER CLB OR V) ;

SELECT (Pron Pers Erg 2 Pl) IF (0C* S:Erg + S:2Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Nom 2 Pl) IF (0C* S:Nom + S:2Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 2 Pl) IF (0C* S:Dat + S:2Pl BARRIER CLB OR V) ;

SELECT (Pron Pers Erg 3 Pl) IF (0C* S:Erg + S:3Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 3 Pl) IF (0C* S:Dat + S:3Pl BARRIER CLB OR V) ;

SELECT (Pron Pers Erg 1 Sg) if (0C* DO:Erg + DO:1Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Nom 1 Sg) if (0C* DO:Nom + DO:1Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 1 Sg) if (0C* DO:Dat + DO:1Sg BARRIER CLB OR V) ;

SELECT (Pron Pers Erg 2 Sg) IF (0C* DO:Erg + DO:2Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Nom 2 Sg) IF (0C* DO:Nom + DO:2Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 2 Sg) IF (0C* DO:Dat + DO:2Sg BARRIER CLB OR V) ;
o-SELECT (Pron Pers Dat 2 Sg) IF (0C* DO:Dat + DO:2Sg OR DO:Dat + DO:2 BARRIER CLB OR V) ;
o-SELECT (Pron Pers Nom 2 Sg) IF (0C* DO:Nom + DO:2Sg OR DO:Nom + DO:2 BARRIER CLB OR V) ;

SELECT (Pron Pers Erg 1 Pl) IF (0C* DO:Erg + DO:1Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Nom 1 Pl) IF (0C* DO:Nom + DO:1Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 1 Pl) IF (0C* DO:Dat + DO:1Pl BARRIER CLB OR V) ;

SELECT (Pron Pers Erg 2 Pl) IF (0C* DO:Erg + DO:2Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Nom 2 Pl) IF (0C* DO:Nom + DO:2Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 2 Pl) IF (0C* DO:Dat + DO:2Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 2 Pl) IF (0C* IO:Dat + IO:2Pl BARRIER CLB OR V) ;
om-SELECT (Pron Pers Dat 2 Pl) IF (0C* IO:Dat + IO:2 BARRIER CLB OR V) ;

SELECT (Pron Pers Dat 1 Pl) IF (0C* IO:Dat + IO:1Pl BARRIER CLB OR V) ;
o-SELECT (Pron Pers Dat 1 Pl) IF (0C* IO:Dat + IO:1 + Incl BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 2 Pl) IF (0C* IO:Dat + IO:2Pl BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 1 Sg) IF (0C* IO:Dat + IO:1Sg BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 2 Sg) IF (0C* IO:Dat + IO:2Sg BARRIER CLB OR V) ;
o-SELECT (Pron Pers Dat 2 Sg) IF (0C* IO:Dat + IO:2Sg OR IO:Dat + IO:2 BARRIER CLB OR V) ;
SELECT (Pron Pers Dat 3 Pl) IF (0C* IO:Dat + IO:3 BARRIER CLB OR V) ;

SELECT (Pron Rel Hum Dat) IF (0C* IO:Dat + IO:3 BARRIER CLB OR V) ;

om-SELECT NOM + Pl
       IF (0C Nom)
       	  (0* DO:Nom + DO:3Pl BARRIER CLB OR V) ;

o-SELECT Dat + OldPl
      IF (0 Hum)
      	 (-1 IO:Dat + IO:3)
	 (NEGATE -2* Dat BARRIER CLB OR V) ;

# Erg must be licensed by verb
SELECT S:Erg + S:3 IF (0C* Erg - Att BARRIER CLB) ;

#@@@ select subj marker from Pron Pers

SELECT (V S:1Sg) IF (0C S:Erg) (0* (Pron Pers Erg 1 Sg) BARRIER CLB OR V) ;

SELECT (V S:1Sg) IF (0C S:Nom) (0* (Pron Pers Nom 1 Sg) BARRIER CLB OR V) ;
SELECT (V S:1Sg) IF (0C S:Dat) (0* (Pron Pers Dat 1 Sg) BARRIER CLB OR V) ;

SELECT (V S:2Sg) IF (0C S:Erg) (0* (Pron Pers Erg 2 Sg) BARRIER CLB OR V) ;
SELECT (V S:2Sg) IF (0C S:Nom) (0* (Pron Pers Nom 2 Sg) BARRIER CLB OR V) ;
SELECT (V S:2Sg) IF (0C S:Dat) (0* (Pron Pers Dat 2 Sg) BARRIER CLB OR V) ;

SELECT (V S:1Pl) IF (0C S:Erg) (0* (Pron Pers Erg 1 Pl) BARRIER CLB OR V) ;
SELECT (V S:1Pl) IF (0C S:Nom) (0* (Pron Pers Nom 1 Pl) BARRIER CLB OR V) ;
SELECT (V S:1Pl) IF (0C S:Dat) (0* (Pron Pers Dat 1 Pl) BARRIER CLB OR V) ;

SELECT (V S:2Pl) IF (0C S:Erg) (0* (Pron Pers Erg 2 Pl) BARRIER CLB OR V) ;
SELECT (V S:2Pl) IF (0C S:Nom) (0* (Pron Pers Nom 2 Pl) BARRIER CLB OR V) ;
SELECT (V S:2Pl) IF (0C S:Dat) (0* (Pron Pers Dat 2 Pl) BARRIER CLB OR V) ;

# replace previous ones by this and the like
SELECT (V S:2Pl) IF (0 S:Erg) (NOT 0 DO:2Pl) (NOT 0 IO:2Pl) (0* (Pron Pers Erg 2 Pl) BARRIER CLB OR V) ;


SET NomArg1Sg = (<S:Nom> S:1Sg) OR DO:Nom + DO:1Sg ;
SET NomArg2Sg = (<S:Nom> S:2Sg) OR DO:Nom + DO:2Sg ;
SET NomArg3Sg = (<S:Nom> S:3Sg) OR DO:Nom + DO:3Sg ;
SET NomArg3Pl = (<S:Nom> S:3Pl) OR DO:Nom + DO:3Pl ;

SET DatArg1Sg = (<S:Dat> S:1Sg) OR (<DO:Dat> DO:1Sg) OR (<IO:Dat> IO:1Sg) ;
SET DatArg2Sg = (<S:Dat> S:2Sg) OR (<DO:Dat> DO:2Sg) OR (<IO:Dat> IO:2Sg) ;
SET DatArg3Sg = (<S:Dat> S:3Sg) OR (<DO:Dat> DO:3Sg) OR (<IO:Dat> IO:3) ; # OR (<IO:Dat> IO:3Sg) ;
SET DatArg3Pl = (<S:Dat> S:3Pl) OR (<DO:Dat> DO:3Pl) OR (<IO:Dat> IO:3) ;

SELECT NomArg1Sg IF (0*C (Pron Pers Nom 1 Sg) BARRIER CLB OR V) ;
SELECT NomArg2Sg IF (0*C (Pron Pers Nom 2 Sg) BARRIER CLB OR V) ;
SELECT NomArg3Pl IF (0*C NOM + Pl BARRIER CLB OR V) ;

SELECT DatArg1Sg IF (0*C (Pron Pers Dat 1 Sg) - PP BARRIER CLB OR V) ;
SELECT DatArg2Sg IF (0*C (Pron Pers Dat 2 Sg) - PP BARRIER CLB OR V) ;
SELECT DatArg3Sg IF (0*C (Pron Pers Dat 3 Sg) - PP BARRIER CLB OR V) ;

SELECT (V S:2Sg) IF (0C S:Erg) (0* (Pron Pers Erg 2 Sg) BARRIER CLB OR V) ;
SELECT (V S:2Sg) IF (0C S:Nom) (0* (Pron Pers Nom 2 Sg) BARRIER CLB OR V) ;
SELECT (V S:2Sg) IF (0C S:Dat) (0* (Pron Pers Dat 2 Sg) - PP BARRIER CLB OR V) ;

SELECT (V S:3Sg) IF (0C S:Erg) (0* ErgSg - Att BARRIER CLB OR V) ;
SELECT (V S:3Sg) IF (0C S:Nom) (0* NomSg - Att BARRIER CLB OR V) ;
SELECT (V S:3Sg) IF (0C S:Dat) (0* DatSg - Att BARRIER CLB OR V) ; # FIXME: only S:3 for Inv OG

SELECT (V S:3Pl) IF (0C S:Erg) (0* ErgPl - Att BARRIER CLB OR V) ;
SELECT (V S:3Pl) IF (0C S:Nom) (0* NomPl - Att BARRIER CLB OR V) ;
SELECT (V S:3Pl) IF (0C S:Dat) (0* DatPl - Att BARRIER CLB OR V) ; # FIXME: only S:3 for Inv OG

SELECT (V S:1Pl) IF (0C S:Erg) (0* (Pron Pers Erg 1 Pl) BARRIER CLB OR V) ;
SELECT (V S:1Pl) IF (0C S:Nom) (0* (Pron Pers Nom 1 Pl) BARRIER CLB OR V) ;
SELECT (V S:1Pl) IF (0C S:Dat) (0* (Pron Pers Dat 1 Pl) - PP BARRIER CLB OR V) ;

SELECT (V S:2Pl) IF (0C S:Erg) (0* (Pron Pers Erg 2 Pl) BARRIER CLB OR V) ;
SELECT (V S:2Pl) IF (0C S:Nom) (0* (Pron Pers Nom 2 Pl) BARRIER CLB OR V) ;
SELECT (V S:2Pl) IF (0C S:Dat) (0* (Pron Pers Dat 2 Pl) - PP BARRIER CLB OR V) ;

SELECT (V IO:2Pl) IF (0C IO:Dat) (0* (Pron Pers Dat 2 Pl) - PP BARRIER CLB OR V) ;
om-SELECT (V IO:2) IF (0C IO:Dat) (0* (Pron Pers Dat 2 Pl) - PP BARRIER CLB OR V) ;

o-REMOVE (V [Excl]) IF (0* (Pron Pers 1 Sg) BARRIER CLB OR V) ;
o-SELECT (V [Excl]) IF (0* (Pron Pers 1 Pl) BARRIER CLB OR V) ;

SELECT (V S:3Sg) IF (0C S:Nom) (0* Anthr BARRIER CLB OR V) ;

SELECT DO:2Pl IF (0C DO:Dat) (0* (Pron Pers Dat 2 Pl) - PP BARRIER CLB OR V) ;

# არავინ არ…; ვინმე
SELECT (V S:3Sg) IF (0C S:Nom) (-1* Pron + Hum + Nom BARRIER CLB OR V) ;

# ახლავს, გახლავთ…
n-SELECT ("ხლებ[ა]/ახლ" MedPass)
     IF (NEGATE -1* ("თან") BARRIER CLB)
     	(NEGATE 1 ("თან")) ;

n-SELECT ("ხლებ[ა]/ახლ" MedAct)
     IF (1 ("თან")) ;

n-SELECT ("ხლებ[ა]/ახლ" MedAct)
     IF (-1 ("თან")) ;

n-SELECT ("ხლებ[ა]/ახლ" MedAct)
     IF (-2 ("თან")) ;

SELECT PassState ;

SELECT <S-DO> OR <S-DO-IO>
    IF (0 <S-DO> + DO:Nom + DO:3)
       (NOT 0 <S> OR <S-IO>)
       (0* Nom - Att BARRIER CLB) ;

SELECT <S-DO>
    IF (0 <S>)
       (0 <S-DO> + DO:Dat + DO:3)
       (0* Dat - Att - PP BARRIER CLB) ;

# იდო almost always passive
SELECT <S> + ("დებ[ა]/დ")
    IF (NEGATE 0* Erg BARRIER CLB) ;

# გაუწევია წინააღმდეგობა
SELECT <S-DO>
    IF (0 <S>)
       (0 <S-DO> + DO:Nom + DO:3)
       (NEGATE 0 Pass)
       (0* Nom - Att BARRIER CLB) ;

SELECT <S-DO>
    IF (0C V)
       (NOT 0 <S>)
       (NOT 0 <S-IO>)
       (0 <S-DO-IO> + S:Erg + IO:Dat + IO:3)
       (NEGATE 0* T:NPDat BARRIER CLB) ;

# two dative objects
SELECT <S-DO-IO> + DO:Dat + DO:3 + IO:Dat + IO:3
    IF (0C V)
       (NOT 0 <S>)
       # (0 <S-DO> + S:Nom + IO:Dat + IO:3)
       (-1* T:NPDat BARRIER CLB)
       (1* T:NPDat BARRIER CLB) ;

REMOVE <S-IO> + IO:Dat + IO:12
    IF (0C V)
       (NOT 0 <S>)
       (0 <S-DO-IO> + S:3 + IO:12)
       (0* T:NPDat BARRIER CLB) ;

SELECT <S-DO>
    IF (0C V)
       (NOT 0 <S>)
       (0 <S-DO-IO> + S:Nom + IO:Dat + IO:3)
       (NEGATE 0* T:NPDatHum BARRIER CLB) ;

# დამიბარა
SELECT <S-DO> + IOHumV
    IF (0C V + AOR)
       (NOT 0 <S>)
       (0 <S-DO-IO> + IO:12)
       (NEGATE 0* Nom BARRIER CLB) ;

SELECT ("გა·კვირვებ[ა]/კვირვ") + <S-DO> + DO:12 ;

SELECT ("*·ხმობ[ა]/ხმ") + <S-DO> + DO:12 ;

SELECT ("შე·ხედვ[ა]/ხედ") + <S-IO>
    IF (0* T:NPDat BARRIER CLB) ;

SELECT ("ქცევ[ა]/ქც[ევ]")
    IF (0* Advb BARRIER CLB) ;

# … contradicts this:
# გიშოვნით
SELECT <S-DO-IO> + IO:12
    IF (0 <S-DO> + DO:12) ;

# ხალხს მიმართა
SELECT <S-IO> + Pass + IO:Dat + IO:3
    IF (0C V + AOR)
       (0 <S-DO-IO> + DO:Nom + DO:3)
       (NOT 0 S:12)
       (NEGATE 0* Erg BARRIER CLB)
       (0* T:NPDat BARRIER CLB) ;

#  check this one
SELECT <S-IO> + IO:Dat + IO:3
    IF (0C V + AOR)
       (0 <S-DO-IO> + DO:Nom + DO:3)
       (NEGATE 0* Nom BARRIER CLB)
       (0* T:NPDat BARRIER CLB) ;

REMOVE <S> + <S:Nom>
    IF (0 <S-IO> + <IO:Dat>)
       (0* T:NPDat BARRIER CLB) ;

SELECT <S-DO-IO>
    IF (0C V + AOR)
       (0 <S-DO>)
       (NOT 0 <S-IO>)
       (0 <S-DO-IO> + IO:Dat + IO:3)
       (0* T:NPDat BARRIER CLB) ;

# უნდა გითხრათ
SELECT <S-DO-IO>
    IF (0C CCompV + AOR)
       (NOT 0 <S-DO>)
       (0 <S-IO>)
       (1 Comma LINK 1 ("რომ")) ;

# შემჩნეული ექნება
SELECT ("ქონ[ა]/ქნ" Inv) IF (-1 PastPart) ;
SELECT ("ქონ[ა]/ქნ" Inv) IF (-1 Neg LINK -1 PastPart) ;
SELECT ("ქონ[ა]/ქნ" Inv) IF (1 PastPart) ;

SELECT <S-IO>
    IF (0C V)
       (NOT 0 <S-DO-IO>)
       (NOT 0 <S-DO>)
       (0 <S-IO> + IO:Dat + IO:3)
       (0* T:NPDat BARRIER CLB) ;

SELECT <S>
    IF (0C V)
       (NOT 0 <S-DO>)
       (0 <S-IO> + IO:Dat + IO:3)
       (NEGATE 0* T:NPDat BARRIER CLB)
       (NEGATE 1* Comma BARRIER V LINK 1 CCompSub) ;

SELECT <S-IO>
    IF (0C V)
       (NOT 0 <S-DO-IO>)
       (0 <S-IO> + IO:Dat + IO:3)
       (1* Comma BARRIER V LINK 1 CCompSub) ;

REMOVE DO:1Sg
    IF (0 DO:3)
       (0C DO:Nom)
       (0*C Nom)
       (NEGATE 0* Pron + Pers + (1 Sg))  ;

REMOVE Dat - Temp - PP
    IF (0 V)
       (-1* V + DatArg3 - DoubleDatArg3 LINK -1* Dat - Temp BARRIER CLB) ; 

REMOVE Dat - Temp - PP
    IF (1* V + DatArg3 - DoubleDatArg3 BARRIER V)
       (-1* Pron + Rel + Dat BARRIER V) ; 

SELECT NomArg3
    IF (-1* Pron + Rel + Nom BARRIER V) ;

SELECT ErgArg3
    IF (-1* Pron + Rel + Erg BARRIER V) ;

SELECT DatArg3
    IF (-1* Pron + Rel + Dat BARRIER V) ;

# sentence complements

REMOVE DO:3Pl
    IF (0 DO:3)
       (0 CCompV)
       (1 Comma)
       (2 ("რომ")) ;

REMOVE DO:3Pl
    IF (0 DO:3)
       (0 CCompV)
       (1 ("რომ")) ;

# Act/Pass disambiguation

#მივიღოთ	
#	მი-ღებ[ა]/ღ	V Pass Opt Pv <S> <S:Nom> S:1Pl	
#	მი-ღებ[ა]/ღ	V Act Opt Pv SV <S-DO> <S:Erg> <DO:Nom> S:1Pl DO:3	

# remove Passive with 1/2 pers S if there is active reading and DO available
# TODO: variants thereof
REMOVE (Pass <S>) + $$S:12
    IF (0C V)
       (0 (Act <S-DO> <DO:Nom> DO:3) + $$S:12)
       (0* NOM BARRIER CLB) ;

# should be passive if Nom arg precedes
REMOVE (Act <S-DO> <S:Erg>)
    IF (0C V)
       (0 Pass + <S> + S:3Sg)
       (-1 Nom)
       (NEGATE 0* Erg BARRIER CLB) ;

# or if Nom arg has rel subclause
REMOVE (Act <S-DO> <S:Erg>)
    IF (0C V)
       (0 (Pass <S> S:3Sg))
       (1 Nom)
       (2* Comma LINK 1 Rel) # ??
       (NEGATE 0* Erg BARRIER CLB) ;

# Aor active if Nom Obj is non-Hum
#REMOVE (Pass <S> S:3Sg)
#    IF (0C V)
#       (0 (Act <S-DO> <DO:Nom> DO:3))
#       (0* Nom + Sg - Hum BARRIER CLB) ;

# გიას უნდოდა
SELECT Prop + Dat - PP
    IF (1 S:Dat + S:3Sg) ;

SELECT Dat - OldPl
    IF (0C Dat OR Gen)
       (NEGATE 0* T:NPDat BARRIER CLB)
       (0* DO:Dat + DO:3 BARRIER CLB OR V) ;

# თქვენდა etc. if IO
om-SELECT (Pron Pers Ben)
	   IF (0* IO:Dat + IO:3 BARRIER CLB OR V)
	      (NEGATE 0* Dat BARRIER CLB OR V) ;

# რომლისა ღირს ვარ
o-SELECT Ben # or Dir?
	 IF (0* ("ღირს·ი") LINK 1 AUX BARRIER CLB OR V) ;

# remove 1/2 person arg reading if a 3rd person arg is found with appropriate case
# Dangerous! Could be apposition, or Prl
# REMOVE (V S:1Sg <S:Nom>) IF (0* Nom - Att BARRIER CLB) ;
# REMOVE (V S:2Sg <S:Nom>) IF (0* Nom - Att BARRIER CLB) ;
# REMOVE (V S:1Pl <S:Nom>) IF (0* Nom - Att BARRIER CLB) ;
# REMOVE (V S:2Pl <S:Nom>) IF (0* Nom - Att BARRIER CLB) ;

# conjunct S agreement
SELECT $$S:12 IF (-1* Cj LINK -1*C $$S:12 BARRIER CLB1) ;

# wrong: could be A before N
#SELECT (N Nom) - Att IF (0C* (V <S:Nom> S:3Sg) BARRIER CLB) ;
# what about Pron etc.?
SELECT (N Nom Pl) - Att IF (0C* (V <S:Nom> S:3Pl) BARRIER CLB) ;

SELECT Pron + Pers + Nom
    IF (1 @NC LINK 1* NA + Hum + Nom - Att OR Prop + Nom BARRIER V OR CLB) ;

# doesnt work!
#SELECT Pron + Pers + $$CASE
#    IF (1 @NC)
#       (2* NA + Hum + $$CASE - Att OR Prop + $$CASE BARRIER V OR CLB) ;

# remove Nom Full if it is not a verb argument and there is a verb
REMOVE Nom - 1 - 2 - Att # + $$CASE
       IF (NEGATE 0* NomArg3 BARRIER CLB)
	  (NEGATE 0* <AuxIntr> BARRIER CLB)
          (NEGATE -1* Pron + Pers + 1 OR Pron + Pers + 2 BARRIER V LINK 1 ("და")) # coordination with 1/2
	  (NOT -1 Pron + Poss) # + $$CASE)
	  (0* V BARRIER CLB) ;

# disambiguate Gen and Dat
SELECT NProp + Gen - Att
    IF (0 NProp + Dat - Att - Temp)
       (0C NProp)
       (1 NCProp)
       (NEGATE 0* DatArg3 BARRIER CLB) ;

LIST interNPAdv = "ალბათ" ; # more!

# remove Gen if not attributive or licensed by PP or V
n-REMOVE Gen
    IF (NOT 0 PP)
       (NOT 1 POSTP + <Gen>)
       (NOT 1 POSTP + <Dat/Gen>)
       (NOT 1 Gen)
       (NOT 1 NACProp)
       (NOT 1 interNPAdv LINK 1 NACProp)
       (NEGATE 1 Adv LINK 1 NA)
       (NEGATE 1 (Cj Coord) OR (",") OR (Adv) LINK 1 Gen)
       (NEGATE 1 T:NPGen LINK 1 Gen)
       (NEGATE -1 T:NPGen LINK -1 N) # ??
       (NEGATE -1 T:NPGen LINK -1 PREP + <Gen>)
       (NEGATE 0* GenArg BARRIER CLB) ;

n-REMOVE Gen
    IF (0 Dat)
       (1 A + Advb + Sg OR Adv)
       (0* DatArg3 BARRIER CLB) ;

n-REMOVE Gen + Att IF (1 Pron + Poss - Att) ;

# improve! remove Dat if there is a Dat nearer to a verb wanting Dat
n-REMOVE Dat + NProp - Att - Temp
    IF (NOT 1 POSTP + <Dat>)
       (NOT 1 POSTP + <Dat/Gen>)
       (NEGATE 1 ("და" Cj) OR (",") OR Adv LINK 1 Dat)
       # (1*C Dat LINK NOT 0 DO:Dat + IO:Dat LINK 1* DatArg3 BARRIER CLB) ;
       (1*C Dat - PP BARRIER V LINK 1* DatArg3 - DO:Dat + IO:Dat BARRIER CLB) ;

# remove Dat if there is a relative in Dat
n-REMOVE Dat + NProp - Att - Temp - PP
    IF (NOT 1 POSTP + <Dat>)
       (NOT 1 POSTP + <Dat/Gen>)
       (NEGATE 1 ("და" Cj) OR (",") OR Adv LINK 1 Dat)
       (-1* V LINK NOT 0 DO:Dat + IO:Dat LINK -1* Rel + Dat BARRIER CLB) ;

om-REMOVE Gen - L - PP
    IF (NOT 1 POSTP + <Gen>)
       (NOT 1 POSTP + <Dat/Gen>)
       (NOT -1 PREP + <Gen>)
       (NOT -1 PREP + <Dat/Gen>)
       (NOT 1 Gen)
       (NOT -1 Gen) # OG
       (NOT 1 NACProp)
       (NEGATE 1 ("და" Cj) OR (",") OR (Adv) LINK 1 Gen)
       (NEGATE 1 T:NPGen LINK 1 Gen)
       (NEGATE -1 T:NPGen LINK -1 N) # ??
       (NEGATE -1 T:NPGen LINK -1 PREP + <Gen>)
       (NEGATE 0* GenArg BARRIER CLB) ;

o-SELECT Dat + OldPl
     IF (0C Dat OR Dir OR Ben)
     	(0* IO:Dat + IO:3 BARRIER CLB) ;

# OG attributive Gen
om-SELECT Gen + L
     IF (-1 N - Prop) ;

# Gen after VN in Advb
o-SELECT N + Gen + OldPl
	IF (-1 VN + Advb + Sg) ;


SELECT N + Temp + Nom
    IF (0* DO:Nom + DO:3 BARRIER CLB) ;

REMOVE S:Nom + S:12
    IF (0 DO:Nom + DO:3)
       (0* Nom BARRIER CLB)
       (NEGATE 0* <AuxIntr> BARRIER CLB) ;


# Post/prepositions ; fixme: see also below
# ------------------------

SELECT ("შემდეგ") + Pp IF (-1 Gen) ;
SELECT ("მიუხედავად") + Pp IF (-1 Gen) ;
SELECT ("მიუხედავად") + Pp IF (1 Gen) ; # add: head should be L
SELECT ("მახლობლად") + Adv IF (-1 Gen) ; # should be Pp?

SELECT ("<ერთად>") + Pp IF (-1 PP:თან) ;
REMOVE ("<ერთად>") + Pp IF (NOT -1 PP:თან) ;

SELECT (Pp <Gen>) - PREP IF (-1C N + Gen OR Pron + Pers + Dat) ;
SELECT PREP + <Gen> IF (1 T:NPGen LINK 1 (N Gen)) ;
SELECT PREP + <Gen> IF (1 (N Gen)) ;
SELECT Gen IF (-1 PREP + <Gen>) ;
SELECT N + Gen IF (-1 T:NPGen LINK -1 PREP + <Gen>) ;

SELECT (Pp <Dat>) - PREP IF (-1 (N Dat)) ;
SELECT PREP + <Dat> IF (1 T:NPGen LINK 1 (N Dat)) ;
SELECT PREP + <Dat> IF (1 N + Dat) ;
SELECT PREP + <Dat> IF (1 Pron + Dat) ;
SELECT N + Dat IF (-1 T:NPGen LINK -1 PREP + <Dat>) ;

SELECT (Pp <Gen>) - PREP IF (-1 Pron + Pers + Dat) ;

# მის წინაშე
SELECT Pron + Pers + Gen
    IF (1 Pp + <Gen>) ;
SELECT Pron + Pers + Gen
    IF (1 Pp + <Dat/Gen>) ;

# ამის მეტს
n-SELECT Pron + Pers + Gen
    IF (1 A + Quant + Sg) ;

SELECT N + Gen
    IF (1C POSTP + <Gen>) ;

SELECT ("მეტ·ი")
    IF (-1 N + Gen) ;

SELECT A + Gen - Att
    IF (1C POSTP + <Gen>) ;

SELECT A + Quant + Dat # not Gen
    IF (0* DatArg3 BARRIER V OR SubCj
        LINK NEGATE 0* DatHead - Quant BARRIER V OR SubCj) ; 

# wrong
#SELECT S:Nom + (S:3Sg) IF (0* (Full Nom) BARRIER CLB) ;

#remove ("<S-DO-R-Padv>")
#    if (not 0* Advb BARRIER CLB) ;

REMOVE Att + $$CASE
    IF (NOT 1 NOM)
       (NOT 1 Foreign)
       (NOT 1 Pron + Dem + $$CASE) # მთელი ეს ფიქრი
       (NOT 1 Pron + Poss + $$CASE) # დღევანდელი ჩვენი მწერლობის
       (NOT 1 Pron + Refl + $$CASE) # ჩემს თავზე
       (NOT 1 Pron + Neg + $$CASE) # სხვა არავინ
       (NEGATE 1 COORD LINK 1 Att + $$CASE)
       (NEGATE 1 COORD LINK 1 Adv OR Advb LINK 1 Att + $$CASE)
       (NEGATE 1 Comma LINK 1 Att + Gen LINK 1 Gen LINK 1 Att + $$CASE)
       (NEGATE 1 Comma LINK 1 ("მაგრამ") LINK 1 Att + $$CASE) ;

REMOVE (Pron Int Erg) IF (1 V + S:12);

SELECT (Pron Int Erg) IF (1 V + ("ცოდნა" Pres S:3Sg));

# Disambiguation of ჩემ(ს)

SELECT ("მე") IF (1 POSTP);

SELECT ("ჩემ·ი") IF (NOT 1 POSTP);

# Abs and ყოფა

om-SELECT (N Abs)
       IF (0* ("ყოფ[ა]/არ" MedPass) BARRIER CLB) ;

# heuristics: most are relatives
REMOVE Pron + Int IF (0 Pron + Rel) (NEGATE 1* IntMark) ;

# PP disambiguation
# =================

# Aux vs. long -ა

REMOVE Aux IF (0* V BARRIER CLB OR ("და") OR ("ან")) ;

# Card/Ord disambiguation

LIST MONTH = "იანვ[ა]რ·ი" "თებერვ[ა]ლ·ი" "მარტ·ი"
     	     "აპრილ·ი" "მაის·ი" "ივნის·ი"
	     "ივლის·ი" "აგვისტო" "სექტემბ[ე]რ·ი"
	     "ოქტომბ[ე]რ·ი" "ნოემბ[ე]რ·ი" "დექემბ[ე]რ·ი" ;

# IV საუკუნე
SELECT Ord
    IF (1 MONTH OR ("საუკუნ[ე]")) ;

SELECT Ord + Roman
    IF (-1 ("წელთაღრიცხვ[ა]")) ;

# add: თავი 1

SELECT Card ;

# A/N disambiguation
# ==================

# doesn't work well
# but: ძველს დროს (ჭავჭავაძე)
#REMOVE A + $$CASE - Att
#    IF (0 N + $$CASE - Att) ;

# predicative adjective
n-SELECT A + Nom IF
	 (1 AUX)
	 (NOT -1 A + Nom) ;

# remove A reading if N reading present and no following head
n-REMOVE A + $$CASEnoAdvb - Att - Quant
      IF (0 N + $$CASEnoAdvb - Att)
      	 (NOT 1 NA + $$CASEnoAdvb)
	 (NOT 0 Encl:Aux)
	 (NOT 1 PREDVerb)
	 (NOT 1 Neg LINK 1 PREDVerb)
      	 (NEGATE 1 ("და") LINK 1 NA + $$CASEnoAdvb) ;

# ?? og has no Att?
om-REMOVE A + $$CASEnoAdvb - Att - Quant
      IF (0 N + $$CASEnoAdvb - Att)
      	 (NOT -1 NA + $$CASEnoAdvb)
      	 (NOT 1 NA + $$CASEnoAdvb)
	 (NOT -1 Pron + Poss + $$CASEnoAdvb) ;

# remove A if full case and N present
n-REMOVE A + Gen - Att
      IF (0 N + Gen - Att) ;

REMOVE A + NewPl + $$CASE
    IF (0 N + $$CASE) ;

n-REMOVE Att - Pron - Poss
    IF (1 Refl - Att) ;

# მისი ოთახია
SELECT Pron + Poss + Att + $$CASE
    IF (1 NA + $$CASE)
       (NOT 1 A + Advb) ;

# მე და შენ
SELECT Pron + Pers
    IF (-1 ("და"))
       (-2 Pron + Pers) ;

n-SELECT Att - <OldPl> + $$CASE - ("დ[ა]") - Guess - ("ხელ·ი") - Refl
    IF (NOT 0 Gen - Att)
       (NOT 0 PP)
       (NOT 1 Encl:Aux)
       (NOT 1 A + Advb)
       (NOT 2 <AuxIntr>)
       (NEGATE 2 Modal OR Neg LINK 3 <AuxIntr>)
       (1C $$CASE - <OldPl>) ;

n-REMOVE Pron + Dem + Nom + Att
      IF (1* Encl:Aux BARRIER (*) - Modal - Gen - Att) ;

#n-SELECT Att - <OldPl> + Gen
#    IF (1C $$CASE - <OldPl> + Gen)
#       (NOT 0 Gen - Att) ;


# DNom

n-REMOVE DNom
      IF (1 ("არ"))
      	 (2 ("<იყოს>")) ;

# Adverb

# ზომაზე მეტად
SELECT PP:ზე
      IF (1 A + Quant) ;

# MWEs

# LIST MWE = 2:Cj 2:Sub 2:Adv ;

#REPLACE ([0] 2:Cj 2:Sub) ("<როგორც>" "როგორც" Adv) (1 ("<კი>")) ;
#REPLACE ([0] 2:Adv) ("<ესე>" Adv) (1 ("<იგი>")) ;

# Crashes cg3 without next line
# APPEND ("2:ესე იგი" 2:Adv) ("<ესე>" Adv) (1 ("<იგი>")) ;
# SELECT MWE ;
# Doesnt work
# SELECT (/2.*/r) ;

# რაც

# მას შემდეგ, რაც
SELECT ("რაც") + Cj # only temporal ones?
    IF (-1* ("ის") + Pron + Pers LINK 1 Pp) ;

# ერთი თვეა, რაც
nm-SELECT ("რაც") + Cj
    IF (-1 Comma LINK -1 Temp + Aux) ;

# რაც cannot be Nom arg:
# either the following verb doesn’t govern a Nom
n-SELECT ("რაც") + Cj
    IF (-1 Comma)
       (NEGATE 1* NomArg3 BARRIER CLB) ;

# or there is already a Nom head
n-SELECT ("რაც") + Cj
    IF (-1 Comma)
       (1* NomHead BARRIER CLB) ;

# else, choose რაც as being the Nom head
n-SELECT ("რ[ა]") + Pron + Rel
    IF (-1 Comma)
       (1* NomArg3 BARRIER CLB)
       (NEGATE 1* NomHead BARRIER CLB) ;

n-SELECT ("როგორც" Adv)
      IF (NEGATE 1* V BARRIER CLB OR Comma)
      	 (NEGATE 1* Aux BARRIER CLB OR Comma)
	 (NEGATE 1 Adv + Temp) ;

# NP internal constraints
# =======================

# Determiner disambiguation

# Case disambiguation

# Number disambiguation

# Noun disambiguation
# -------------------

# Poss disambiguation

# NP head disambiguation
# ======================

# Inversion


# A or N
# ======

# P chains or not

# Coordination
# Substituting tags

# SUBSTITUTE:sumPr (CS) (Pr) TARGET ("sum") (NOT -1 BOS OR COMMA);


# ======== #
  SECTION  #
# ======== #

# final disambiguation

om-REMOVE (NewPl) ;

REMOVE (Bracket) ;
# REMOVE (Subnorm) ;
# move to later
# REMOVE (VPart);
# REMOVE (Old);
REMOVE (ConjPerf) ;
#REMOVE (Cond) ;
REMOVE (Dialect) ;
# REMOVE (NonStand) ;
REMOVE ("არ[ა]" N) ;

REMOVE ("ის") + Gen - PP ;
REMOVE ("შენ") + Gen - PP ;
REMOVE ("ჩვენ") + Gen - PP ;
REMOVE ("თქვენ") + Gen - PP ;

LIST GeoMod = "სამხრეთ·ი" "აღმოსავლეთ·ი" "ჩრდილოეთ·ი" "დასავლეთ·ი" ;

# but: აღმოსავლეთი რომის…
REMOVE Prop
    IF (-1 A)
       (NOT -1 GeoMod) ;

SELECT Top + Area
    IF (-1 GeoMod) ;

REMOVE ("ტირ·ი") + N + Gen IF (NOT 1 N) ; # ტირის

n-REMOVE V IF (-1 Gen - PP) ;

o-SELECT Gen + OldPl
    IF (1 NA)
       (NEGATE 0 Dat LINK 0* DatArg3 BARRIER CLB) ;

n-SELECT ("და·კვრ[ა]/კრ" <S>) IF (0* PP:ზე BARRIER CLB) ;
n-SELECT ("და·კვრ[ა]/კ[ა]რ" <S>) IF (0* PP:ზე BARRIER CLB) ;

SELECT ("გარდა·ცვალებ[ა]/ცვალ" /<გარდა.*/r) ;

# remove plain A reading of ordinals (TODO: remove from lexicon)
SELECT (Ord Alpha) ;

REMOVE IMPV
    IF (1* IntMark) ;

REMOVE IMPV
    IF (-1 Int) ;

SELECT IMPV
    IF (0C V)
       (1* ExclPoint) ;

SELECT IMPV
    IF (-1* Voc) ;

REMOVE IMPV
    IF (-1* Cj + Sub BARRIER CLB) ;

REMOVE Voc OR DVoc
    IF (NOT 1* ExclPoint)
       (NOT 1* IntMark)	
       (NOT -1 Voc) ;

REMOVE N + Voc OR DVoc
    IF (NOT -1 Voc)
       (NOT 1 ExclPoint)
       (NOT 1 IntMark)
       (NOT 1 Comma) ;

SELECT N + Voc
    IF (-1 A + Voc + Att) ;

o-SELECT N + Voc
    IF (0C Voc OR (Abs Encl:IndSp3))
       (1 ExclPoint OR IntMark) ;

LIST NonVoc = Nom Erg Dat Gen Advb Inst Abs ;

REMOVE N + Voc OR DVoc
    IF (-1C* V BARRIER BOP OR BOS) ;
REMOVE N + Voc OR DVoc
    IF (-1C* NonVoc BARRIER BOP OR BOS) ;

# -თა is mostly attributive Gen
n-SELECT Gen + OldPl - Att
      IF (NOT 0 Adv + NonStand)
         (NOT 0 V)
      	 (1 NA) # too inexact
	  ;

# preverbless transitives: წარმოადგენს, განსაზღვრავს
# SELECT (Pres Trans) IF (0 (Fut Trans)) (0C V);

SELECT ("<დროს>" Dat) ;

# SELECT ("<და>" N ) ;

# see above
# REMOVE N + Advb IF (0 A + Advb) ;

# e.g., შორის. Check if Dat is always more frequent
SELECT Dat IF (1 POSTP + <Dat/Gen>) ;

# Pres/Fut disambiguation

# TODO: check for equal person/number
# select Pres if all other verbs in the sentence are Pres
SELECT Pres
    IF (0C V)
       (0C* Pres BARRIER (Colon))
       # (NOT 0* Fut)
       ;

# ტანსაცმლის კარადას მივარდება.
SELECT IO:Dat + IO:3 OR DO:Dat + DO:3
    IF (0* DatHead - Temp BARRIER @CLB OR V) ;

# a bit hazardous?
SELECT Pres
    IF (NEGATE 0* V BARRIER CLB)
       (NEGATE -1* (Cj Sub)) ;

SELECT (<Null>) IF (0C V) ; # todo: look at alternative frames

# დიდის შრომითა
n-REMOVE N + Gen IF
     (0 A + Inst - Guess)
     (1C Inst) ;

# ჩვენამდე
SELECT (Pron Pers PP:მდე) ;

### Disambiguation on semantic grounds

# verbs that go with თავი N
# თავი იჩინა (??)
SELECT ("თავ·ი" N)
    IF (1 ("ჩენ[ა]/ჩინ")) ;
SELECT ("თავ·ი" N)
    IF (-1 ("ჩენ[ა]/ჩინ")) ;


# verbs that go with თავი Pron
SELECT ("თავ·ი" Pron)
    IF (1 ("ა·ცილებ[ა]/ცილ")) ;
SELECT ("თავ·ი" Pron)
    IF (-1 ("გრძნობ[ა]/გრძნ")) ;
# თავიდან აცილება
SELECT ("თავ·ი" Pron PP:დან)
    IF (1 ("ა·ცილებ[ა]/ცილ")) ;

SELECT ("წ[ე]ლ·ი") IF (-1 Num + Ord) ;
SELECT ("წ[ე]ლ·ი") IF (-1 Num + Card) ;

SELECT Fut OR Conj-II IF (0* FUT-ADV BARRIER CLB) ;

n-REMOVE ConjPres IF (0 Impf) ;

n-REMOVE ConjFut IF (0 Impf) ;

LIST OPTCComp = "ხსოვნ[ა]/ხსოვ" "თხოვნ[ა]/თხოვ" "ა·უცილებ[ე]ლ·ი/ცილ" "უფლებამოსილ·ი"
                "გონებ[ა]/გონ" "ნებ[ა]/ნებ" "სურვებ[ა]/სურ" ;

SELECT OPT IF (-1* ("ნეტა") BARRIER V) ;

REMOVE OPT # but: სწორი გითხრათ?
    IF (NEGATE -1* V BARRIER CLB)
       (NOT -1* ("<რომ>"))
       (NOT -1* ("იქნებ"))
       (NOT -1* ("<რათა>"))
       (NOT -1* OPTCComp)
       (NEGATE 1* ExclPoint BARRIER CLB) ;

# adhortative
SELECT OPT + S:2 
    IF (-1 ("<არ>"))
       (1* ExclPoint BARRIER EOS) ;

LIST <S-DO*> = <S-DO> <S-DO-IO> ;
LIST <S-IO*> = <S-IO> <S-DO-IO> ;

SELECT OPT + S:2 + <S-DO*>
    IF (-1* ("იქნებ") BARRIER CLB) ;

REMOVE <IO:Obl> + PERF
    IF (NEGATE 0* PP:თვის BARRIER CLB) ;

SELECT <IO:Obl> + PERF
    IF (0* PP:თვის BARRIER CLB) ;

# მიიღე
REMOVE Pass + Impv
    IF (0 Act + Impv)
       (0C Impv) ;

n-REMOVE Impv
    IF (-1 ("უკვე")) ;

n-SELECT Att + $$CASE
    IF (1 Comma LINK 1 Att + $$CASE) ;

n-SELECT N + $$CASE
    IF (0* V BARRIER CLB)
       (NOT 0 ("<და>"))
       (-1 Att + $$CASE) ;

# dangerous?
SELECT Aor
    IF (-1 ("<და>"))
       (-2C Aor) ;

o-SELECT Aor
    IF (0C Aor OR Conj-II)
       (1* Cj LINK 1*C Aor BARRIER CLB) ;

SELECT ("<იყო>") + Aor ;

# removes Abs
o-SELECT Anthr + Erg
    IF (0* ErgArg3Sg) ;
o-SELECT Anthr + Nom
    IF (0* NomArg3) ;

o-REMOVE A + Abs
    IF (0 Adv)
       (NOT -1 NA + Abs)
       (NOT 1 NA + Abs) ;

REMOVE Int
    IF (0 (Rel Rel:ც))
       (NOT 1* IntMark)
       (NOT -1* ("<თუ>")) ;

# add more verbs with Int complement
SELECT Int - Att
    IF (-1* ("და·დგენ[ა]/დგინ") + OPT)
       (1 V) ;

# to make this work msa-set-disambiguation() in gnc/cg3-disambiguate.lisp would have to be changed
# ADD (Rel:ც) (Encl:ც) IF (-1 Rel) ;

# რომლის შესახებაც, რომლის მიზანიც
n-SELECT Rel:ც
      IF (0 Encl:ც + Foc)
      	 (-1 Rel + Gen) ;

n-REMOVE Rel:ც
      IF (0 Encl:ც + Foc) ;

# generalize! (NP)
n-REMOVE Pron + Int + Gen
      IF (0 Rel)
      	 (1 N LINK NOT 1 V OR Neg) ;

n-REMOVE Pron + Int + Gen
      IF (0 Rel)
      	 (1 N LINK 1 Neg LINK NOT 1 V) ;

n-SELECT Pron + Int
      IF (1 V)
      	 (1* IntMark BARRIER CLB) ;

n-SELECT Pron + Int
      IF (1 Neg)
      	 (2 V)
      	 (1* IntMark BARRIER CLB) ;

n-SELECT Pron + Int + Att
      IF (1 N)
      	 (2 V)
      	 (1* IntMark BARRIER CLB) ;

# ებათა
REMOVE Advb + Pl + NewPl + L + NonStand ;

# forms in -და
o-REMOVE Advb + Sg + L IF (0 V) ;

om-REMOVE (Encl:Q) IF (NEGATE 1* IntMark BARRIER CLB) ;

# REMOVE (Der:იანი) ;

REMOVE (/<Der.*/r) ;

# prelim.
n-SELECT (Converb) ;

# remove the more specific one if it cannot be selected unambiguously
n-REMOVE (IO:2Sg) IF (0 (IO:2)) ;

# Lexical disambiguation

# default reading
SELECT ("ა·დგომ[ა]/დგ") ;

SELECT ("ყოვ[ე]ლ·ი" Gen L)
    IF (-1 ("უპირველეს") OR ("უწინარეს") OR ("პირველ") OR ("უპირველესად")) ;

# საღამოს 7 საათზე
SELECT ("საღამო") + Gen
    IF (1 Num)
       (2 ("საათ·ი")) ;

SELECT ("გარეთა" A)
    IF (1 NA) ;

REMOVE ("<ეცვა>" PassState) IF (-1 ("<ჯვარს>")) ;
SELECT ("<ეცვა>" PassState) IF (NOT -1 ("<ჯვარს>")) ;

SELECT ("ფიქრ·ი/ფიქრ" <S-DO>)
       IF (1 Comma)
       	  (2 ("რომ")) ;

SELECT ("ფიქრ·ი/ფიქრ" <S-DO>)
       IF (-1 Comma)
       	  (-2 Encl:IndSp3) ;

SELECT ("ფიქრ·ი/ფიქრ" <S-DO>)
       IF (1 Comma LINK 1* Encl:IndSp3 BARRIER CLB) ;

# ველი(თ)
SELECT ("ლოდინ·ი/ლ")
       IF (1 Comma)
       	  (2 ("რომ")) ;

SELECT ("თავ·ი" N) IF (1 ("საყრ[ე]ლ·ი/ყრ")) ;

REMOVE ("თათ·ი" Hum) IF (-1 ("წინა") OR ("უკანა")) ; # წინა თათი

# remove დაწყობა
SELECT ("და·წყებ[ა]/წყ" <DO:Nom> DO:3)
    IF (0* VN + Nom BARRIER CLB1) ;
#SELECT ("და·წყებ[ა]/წყ" <DO:Nom> DO:3)
#    IF (-1 VN + Nom) ;
SELECT ("*·წყებ[ა]/წყ" <DO:Nom> Imperfective DO:3)
    IF (1 VN + Nom) ;
SELECT ("*·წყებ[ა]/წყ" <DO:Nom> Imperfective DO:3)
    IF (-1 VN + Nom) ;

SELECT ("და·წყებ[ა]/წყ" Pass)
    IF (1 ("ის" Inst))
       (2 Comma)
       (3 ("რომ")) ;

REMOVE ("*·ხდომ[ა]/ხდ") + <S-IO> + PRES ; # remove (გარდა-/აღმო-ხდება which is rare)

#SELECT ("და·წყებ[ა]/წყ" Act)
#    IF (0 "და·წყობ[ა]/წყ" Act)
#       (

SELECT ("და·წყებ[ა]/წყ" Pass S:3Sg)
    IF (NEGATE 0* Erg) ;

# და-ბარვ[ა]/ბარ¦და-ბარებ[ა]/ბარ
# condition motivated by corpus search

SELECT ("და·ბარვ[ა]/ბარ") IF (-1 ("ბოსტ[ა]ნ·ი")) ;
SELECT ("და·ბარებ[ა]/ბარ") ;


# suppress დაძახვა (zwirnen)
SELECT ("და·ძახებ[ა]/ძახ") ;

REMOVE ("მი·ნდობ[ა]/ნდვ") IF (0 ("ნდომ[ა]/ნდ")) ; # მინდოდა

SELECT ("და·ხევ[ა]/ხ[ევ]") IF (-1 ("უკან")) ;

SELECT ("თვალ·ი") IF (2 ("*·შორებ[ა]/შორ")) ;

SELECT ("<ველით>" V) ;

# გახდა vs. გახდომა
SELECT ("გა·ხდომ[ა]/ხდ")
    IF (-1 Advb) ;

SELECT ("გა·ხდომ[ა]/ხდ")
    IF (1 Advb) ;

SELECT ("თქმ[ა]/თხ[ა]რ" Aor) IF (-1 Dash) ;
SELECT ("თქმ[ა]/თხ[ა]რ" Aor) IF (1 Colon) ;

SELECT ("სმენ[ა]/სმ")
    IF (0* ("ხმ[ა]")) ;

REMOVE ("გა·რბენ[ა]/რბ" MedAct <S-DO>)
    IF (NEGATE 1* T:NPDat BARRIER CLB) ;

# ხალხს მიმართა
#REMOVE ("მართვ[ა]/მართ" IO:1Sg)
#    IF (1* T:NPDat BARRIER CLB) ;

SELECT ("ფიქრ·ი/ფიქრ" <S>)
    IF (-1 (PP:ზე)) ;
SELECT ("ფიქრ·ი/ფიქრ" <S>)
    IF (1 (PP:ზე)) ;

REMOVE ("გველ·ი" Prop) ;
REMOVE ("გალავ[ა]ნ·ი" Prop) ;
REMOVE ("უდაბნო" Prop) ;
REMOVE ("ნადირობ" Adv) ;

n-REMOVE ("ოცდაერთ·ი" N) IF (NEGATE 0* ("თამაშ·ი/თამაშ")) ;

# გაჩერდა is mostly not <S-IO> IO:2Sg
REMOVE ("ჩერებ[ა]/ჩერ") ;

# preverb-less Fut competes with Pres
REMOVE ("კეთებ[ა]/კეთ" Fut) ;

SELECT ("შე·ხებ[ა]/ხ") + Pres ;

REMOVE ("საღამო" Prop) ;
REMOVE ("წეს·ი" Prop) ;

REMOVE ("ცოტა" N) ;
SELECT ("ჯვ[ა]რ·ი" Prop Gen) IF (1 ("უღელტეხილ·ი")) ;
REMOVE ("ჯვ[ა]რ·ი" Prop) ;
REMOVE ("შემოქმედ·ი" Prop) ;
REMOVE ("გარემოს" Adv) ;
SELECT ("დაახლოებით" Adv) ;
SELECT ("ლოდინ·ი/ლოდ") ;
SELECT ("<დარგი>" N) IF (-1 (Pron Dem Nom)) ; 
o-SELECT ("რაჲთა" Cj) ;
n-SELECT ("მძიმ[ე]" A) IF (0 Aux) ;
REMOVE ("შიშ·ი" Prop) ;
REMOVE ("თოკ·ი" Prop) ;
o-REMOVE ("ქუეყან[ა]·ჲ") ;
o-REMOVE ("სადა·ჲ" A) ;
o-REMOVE ("ზედა·ჲ" N) ;
o-REMOVE ("წეს[ა]·ჲ" N) ;
nm-REMOVE ("წეს[ა]" N) ;
SELECT ("<მათთან>" "ის") ;
SELECT ("დაწვრილებით") + Adv ;

LIST XeliMeas = "ტამისამოს·ი" "ლოგინ·ი" ; # and more

REMOVE ("ხელ·ი") + Meas
    IF (NOT 1 XeliMeas) ;

REMOVE ("ხელ·ი") + A ;

REMOVE ("ხიდ·ი" Prop) ;

SELECT ("ნებ[ა]") IF (1 ("მი-ცემ[ა]/[ე]ც")) ;
SELECT ("ნებ[ა]") IF (1 Neg) (2 ("მი-ცემ[ა]/[ე]ც")) ;

SELECT ("ა·ღებ[ა]/ღ") + <S-DO> IF (1 Place) ;

o-REMOVE LastName IF (0C Anthr) ;

SELECT ("<წელს>" "წელ·ი") IF (1C Loc) ;

# not ვერა Prop
n-SELECT ("ვერ" L) IF (NEGATE 0* V BARRIER CLB) ;

SELECT Prop IF (-1 Quote) (1 Quote) ;
#REMOVE ("??" Top) ;
#REMOVE ("??" Anthr) ;

# coordinated verbs have same tense
SELECT $$TENSE
    IF (0C V)
       (1 Cj)
       (2C $$TENSE) ;

SELECT $$TENSE
    IF (0C V)
       (1 Cj)
       (2 Adv)
       (3C $$TENSE) ;

SELECT $$TENSE
    IF (0C V)
       (-1 Cj)
       (-2C $$TENSE) ;

SELECT $$TENSE
    IF (0C V)
       (-1 Adv)
       (-2 Cj)
       (-3C $$TENSE) ;

# Frequency disambiguation

#n-SELECT (<lemma=MAX>)
#      IF (0C N) ;

#REMOVE Pass + S:12 ;

REMOVE ("გა·ცემ[ა]/ც") + Pass + S:12 ;

REMOVE Prop + Advb + Att IF (NOT 1 Prop + Advb);
REMOVE Prop + Inst + Att IF (NOT 1 Prop + Inst);
REMOVE Prop + Anthr + Advb ;

REMOVE Prop + Pl ;

# REMOVE (NonStand) ;

# remove double analyses (e.g., მართლაც)
n-REMOVE (Encl:ც) ;
n-REMOVE (Encl:ვე) ;
REMOVE (Encl:მე) ;

SELECT ("<და>" Cj) ;

# Semantic disambiguation of difficult words



n-SELECT ("დენ·ი") IF (-1 ("ცვლად·ი") + Att) ;

# Heuristic syntactic disambiguation
# ========================

SELECT Dat + Temp - Pl ;

n-SELECT N + $$CASE
    IF (-1C Pron + Indef + $$CASE)
       (NOT 0 ("<და>")) ;

REMOVE Interj + (Encl:IndSp3) ; # ოო


# need this again before next rule
SELECT (V S:3Sg) IF (0C S:Nom) (0* NomSg - Att BARRIER CLB OR V) ;

# გთხოვთ etc.
n-REMOVE S:3Sg
      IF (0C IO:2 OR IO:2Pl) ;

n-SELECT Impv
      IF (0C Impv OR Aor) ;

#n-REMOVE Old - ("ჟამ·ი") ;

REMOVE N
      IF (0 V)
      	 (NEGATE 0* V BARRIER CLBarg) ;

REMOVE (".*-.*-.*"r) ;
REMOVE (".*-.*"r) ;

REMOVE ("მი·.*"r)
    IF (0C ("მი·.*"r) OR ("მო·.*"r)) ;

REMOVE ("შე·.*"r)
    IF (0C ("შე·.*"r) OR ("შემო·.*"r)) ;

REMOVE Inv IF (0C V) ; # remove Inv if non-Inv reading is available

# test
ADD @CLB ("მაშინ") IF (-1* V LINK -1* Cj + Sub BARRIER V) (NOT 0 @CLB) ;

# Misc.

SELECT PastPart:ნა ; # prefer ნა-participle

SELECT N + Sg - Guess
    IF (0 A + Sg - Part)
       (NOT 0 Att) ;

n-SELECT ("იზაბელა" Gen) IF (1 ("ღვინო")) ;

n-SELECT ("<გახლდათ>" "ხლებ[ა]/ახლ") ;

n-REMOVE ("ხელ·ი") + A - Att ;

n-REMOVE Guess - <Cand> IF (0 <Cand>) ; # remove those that weren’t chosen

n-REMOVE A + Gen + Att + <OldPl> + Guess ;

# ============= #
  SECTION       #
# Ranking etc.  #
# ============= #

REMOVE Prop + Guess - <Cand> ;

n-SELECT (<lemma=MAX>)
      IF (0C N OR A)
         (NOT 0 Guess) ;

n-SELECT (<lemma=MAX>)
      IF (0C V)
         (NOT 0 Guess) ;

n-ADD (<LMax>) TARGET (<lemma=MAX>) - <LMax>
      IF (0C N OR A OR V)
         (0 (<lemma<MAX>))
         (0 (VAR:rank))
         (0 Guess) ;

#n-SELECT <UnambGuess> IF (0 VAR:rank) ;

n-SELECT (<lemma=MAX>)
      IF (0C N OR A OR V)
         (0 (VAR:rank))
         (0 Guess) ;

SELECT N IF (0 Part) ;

n-SELECT NewPl + Guess ; #- (<lemma=MAX>) ; # prefer treating -ებ as pl suffix, not part of stem

REMOVE NonStand ;

n-REMOVE Ext ;

# ============= #
  SECTION       #
# Dependencies  #
# ============= #

# INCLUDE geo-dep.cg3 ;
INCLUDE geo-dep-ud.cg3 ;

END
